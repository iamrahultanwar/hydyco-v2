{"version":3,"sources":["http.tsx","store/actionTypes.ts","store/actionCreators.ts","components/Header.tsx","components/SideBar.tsx","types/global.ts","components/Badge.tsx","components/common/RequiredText.tsx","components/NewCollectionModal.tsx","components/DataTypes/Boolean.tsx","components/DataTypes/Number.tsx","components/DataTypes/Ref.tsx","components/DataTypes/String.tsx","components/DataTypes/Date.tsx","components/DataTypes/File.tsx","components/DataTypes/JSON.tsx","components/DataTypes/RichText.tsx","components/NewCollectionTypeModal.tsx","components/RemoveCollectionTypeModal.tsx","components/RemoveCollectionModal.tsx","pages/CollectionsPage.tsx","components/SchemaView.tsx","pages/SchemaFlowPage.tsx","pages/DataFlowPage.tsx","components/File/FilesView.tsx","pages/FilePage.tsx","pages/AuthPage.tsx","pages/ApiDocsPage.tsx","pages/LoginPage.tsx","pages/RegisterPage.tsx","components/DataFlow/UploadFile.tsx","components/DataFlow/JSONEditor.tsx","components/DataFlow/RichTextEditor.tsx","components/DataFlow/CreateCollectionModal.tsx","components/DataFlow/RefSelect.tsx","components/DataFlow/CreateCollectionAction.tsx","components/DataFlow/ShowCollectionAction.tsx","components/DataFlow/UpdateCollectionAction.tsx","components/DataFlow/TableFilter.tsx","pages/DataFlowDetailPage.tsx","pages/EmailPage.tsx","components/emails/SendEmail.tsx","pages/EmailPreview.tsx","App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["EOperations","INIT_COLLECTION","ADD_COLLECTION","REMOVE_COLLECTION","SET_COLLECTION","UPDATE_COLLECTION","upsertCollectionData","collection","axios","post","name","deleteCollection","delete","crudCollection","crudBody","query","sendEmail","emailCode","to","from","selectCollection","disPatchAction","type","actionTypes","updateCollection","action","dispatch","a","key","message","loading","content","success","duration","interceptors","request","use","config","localStorage","getItem","headers","authorization","error","Promise","reject","response","status","clear","window","location","replace","data","AppHeader","useLocation","headerName","collections","pathname","split","subHeaderName","ghost","title","subTitle","Sider","Layout","SideBar","ESchemaTypes","ERelationShip","useState","collapsed","setCollapsed","selectedMenu","pages","icon","LineChartOutlined","AlignCenterOutlined","DatabaseOutlined","plugins","FileOutlined","UserSwitchOutlined","MailOutlined","collapsible","width","collapsedWidth","theme","onCollapse","style","height","overflow","marginTop","mode","defaultSelectedKeys","orientation","color","CodeSandboxCircleFilled","CodeSandboxOutlined","map","page","Item","ApiTwoTone","ApiOutlined","plugin","SlidersTwoTone","SlidersOutlined","display","flexDirection","alignItems","onClick","open","focus","PoweroffOutlined","Badge","toLowerCase","string","number","boolean","ref","date","file","json","richText","getBadgeColor","Bool","Relation","Calendar","Duplicate","RichText","getBadgeName","Text","Typography","RequiredText","fontSize","strong","NewCollectionModal","isModalVisible","setIsModalVisible","edit","selectedCollection","collectionName","setCollectionName","showData","setShowData","operations","list","create","read","update","deleteAll","crudOperation","setCrudOperation","nameInput","useRef","useDispatch","newCollection","React","useCallback","addCollection","setSelectedCollection","updateCollectionAction","handleOk","length","col","show","find","id","uuidv4","camelCase","schema","fields","publicMethods","x","Math","floor","y","useEffect","current","className","PlusOutlined","visible","onOk","onCancel","direction","placeholder","value","onChange","target","test","onKeyDown","e","pascalCase","checked","Object","keys","Boolean","state","setState","updateState","updatedData","prev","defaultValue","checkedChildren","unCheckedChildren","defaultChecked","default","required","settings","index","trim","unique","uppercase","lowercase","Number","typeSettings","setTypeSettings","getStateSettings","filter","includes","obj","getKeyValue","min","max","Group","forEach","minLength","maxLength","Ref","useSelector","shallowEqual","relationship","Button","hasMany","hasOne","autopopulate","textTransform","TextArea","Input","String","enumText","setEnumText","enum","join","showCount","rows","lg","disabled","Date","File","JSON","NewCollectionTypeModal","editSchema","saveCollection","footer","schemas","updatedCollection","fontWeight","confirm","Modal","RemoveCollectionModal","removeCollectionType","ExclamationCircleOutlined","deleteType","console","log","deleteCollectionAction","CreateSchema","setEditSchema","openCollectionModal","setOpenCollectionModal","editCollectionModal","setEditCollectionModal","localCollections","setLocalCollections","setSelectCollection","removeCollection","marginBottom","xs","sm","md","xl","extra","padding","size","searchCollections","itemLayout","dataSource","renderItem","cursor","placeItems","letterSpacing","marginLeft","span","operation","paddingTop","bordered","boxShadow","justifyContent","bodyStyle","gutter","borderBottom","align","EditOutlined","DeleteOutlined","RemoveCollectionTypeModal","SchemaView","field","backgroundColor","margin","CaretDownOutlined","CaretRightOutlined","transition","paddingLeft","textAlign","paddingRight","SchemaFlowPage","collectionNodes","setCollectionNodes","mapNodes","nodes","push","label","borderColor","borderRadius","position","elementsNodes","source","animated","labelStyle","checkIfRefExists","updateCollectionPosition","parse","defaultPosition","elements","minZoom","defaultZoom","zoom","snapToGrid","snapGrid","onlyRenderVisibleElements","onMove","setItem","stringify","onNodeDragStop","event","node","DataFlowPage","history","useHistory","paddingBottom","alignContent","Dragger","Upload","FilesView","setCustomFiles","deleteButton","filterButton","selectedFiles","defaultSelectedFiles","setList","setSelectedFiles","setLoading","uploadModal","setUploadModal","pageSize","pagination","setPagination","props","multiple","defaultFileList","info","fileList","onDrop","dataTransfer","files","getCollectionList","model","deleteManyRecord","total","FilterOutlined","l","border","_id","zIndex","tempArray","fileId","preview","src","filename","fallback","originalname","prettySize","mimetype","fieldname","float","packageJson","proxy","p","destroyOnClose","InboxOutlined","FilePage","AuthPage","parseOptions","method","parseDefaults","options","checkedValues","allMethods","ApiDocsPage","CarryOutOutlined","children","d","showLine","showIcon","defaultExpandParent","onSelect","selectedKeys","toString","treeData","LoginPage","email","setEmail","password","setPassword","alt","Password","iconRender","EyeTwoTone","EyeInvisibleOutlined","loginData","role","token","setTimeout","RegisterPage","registerData","then","UploadFile","schemaValue","form","selectedRecord","setFieldsValue","s","rules","JSONEditor","jsonData","setJsonData","locale","jsObject","RichTextEditor","richTextData","setRichTextData","editor","ClassicEditor","ckfinder","uploadUrl","resourceType","onError","onReady","getData","onBlur","onFocus","Option","Select","CreateCollectionModal","c","Form","useForm","createData","formData","body","resetFields","onFinish","values","onFinishFailed","errorInfo","layout","initialValue","htmlType","RefSelect","setData","search","setSearch","searchValues","setSearchValues","setValue","makeSearch","dataId","Array","isArray","showSearch","defaultActiveFirstOption","showArrow","filterOption","onSearch","v","notFoundContent","undefined","onClose","CreateCollectionAction","useParams","queryParams","queryString","back","onBack","marginRight","DisplayData","borderLeft","ShowCollectionAction","setSelectedRecord","getRecordData","UpdateCollectionAction","updateData","moment","TableFilter","handleFilterChange","decodeURI","count","overflowY","initial","replaceAll","bottom","resetQuery","Column","Table","DataFlowDetailPage","columns","setColumns","breadcrumbs","useBreadcrumbs","rowSelection","setRowSelection","column","deleteRecord","href","dataColumns","dataIndex","fixed","match","breadcrumb","url","scroll","rowKey","record","selectedRowKeys","selectedRows","filters","sorter","render","text","format","dangerouslySetInnerHTML","__html","substring","MenuOutlined","overlay","EyeOutlined","placement","MoreOutlined","maxHeight","slice","EmailPage","emailList","setEmailList","subject","html","cc","bcc","emailData","setEmailData","updateDataState","SendEmail","setTo","setFrom","EmailPreview","isLoading","setIsLoading","emailHtml","setEmailHtml","handle","useFullScreenHandle","params","onValueChange","code","highlight","languages","js","fontFamily","Content","ErrorFallback","resetErrorBoundary","description","danger","AuthRoutes","get","initialState","Header","path","exact","component","CollectionsPage","right","opacity","App","isAuth","FallbackComponent","onReset","basename","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","concat","sort","b","localeCompare","updatedCollections","article","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b4fae647.chunk.js","sourcesContent":["import { message } from \"antd\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { ICollection } from \"./types/global\";\n\naxios.interceptors.request.use(\n  (config) => {\n    if (localStorage.getItem(\"token\"))\n      config.headers.authorization = localStorage.getItem(\"token\");\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    if (response.status === 401) {\n      message.error(\"Not authorized\");\n      localStorage.clear();\n      window.location.replace(\"/admin-ui/login\");\n    }\n    return response;\n  },\n  (error) => {\n    if (error.response.status === 401) {\n      message.error(\"Not authorized\");\n      localStorage.clear();\n      return window.location.replace(\"/admin-ui/login\");\n    }\n    if (error.response && error.response.data) {\n      return Promise.reject(error.response.data);\n    }\n    return Promise.reject(error.message);\n  }\n);\n\nexport function getAllCollectionList(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/model/list\");\n}\n\nexport function upsertCollectionData(\n  collection: ICollection\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/create/\" + collection.name, collection);\n}\n\nexport function deleteCollection({\n  name,\n}: ICollection): Promise<AxiosResponse> {\n  return axios.delete(\"/admin/model/delete/\" + name);\n}\n\nexport function crudCollection(\n  crudBody: ICurdBody,\n  query: String = \"\"\n): Promise<AxiosResponse> {\n  return axios.post(\"/admin/model/crud/\" + query, crudBody);\n}\n\nexport enum EOperations {\n  read = \"read\",\n  list = \"list\",\n  create = \"create\",\n  update = \"update\",\n  delete = \"delete\",\n  deleteAll = \"deleteAll\",\n  ref = \"ref\",\n}\n\ninterface ICurdData {\n  id?: string | Array<string>;\n  query?: {\n    pagination?: {\n      current: number;\n      pageSize: number;\n    };\n    find?: {};\n    search?: string;\n  };\n  body?: {};\n}\n\nexport interface ICurdBody {\n  model: string;\n  operations: EOperations;\n  data: ICurdData;\n}\n\nexport function getSwaggerJson(): Promise<AxiosResponse> {\n  return axios.get(\"/admin/api-docs/editor\");\n}\n\nexport function loginAdmin(loginData): Promise<AxiosResponse> {\n  return axios.post(\"/auth/login\", loginData);\n}\n\nexport function registerAdmin(registerData): Promise<AxiosResponse> {\n  return axios\n    .post(\"/auth/admin/register\", registerData)\n    .then((response: any) => {\n      const { data } = response;\n      if (data.status) {\n        localStorage.setItem(\"token\", data.token);\n        return response;\n      }\n      return response;\n    });\n}\n\nexport function sendEmail(emailCode, to, from): Promise<AxiosResponse> {\n  return axios.post(\"/admin/send-mail\", {\n    emailCode,\n    to,\n    from,\n  });\n}\n","export const INIT_COLLECTION = \"INIT_COLLECTION\";\nexport const ADD_COLLECTION = \"ADD_COLLECTION\";\nexport const REMOVE_COLLECTION = \"REMOVE_COLLECTION\";\nexport const SET_COLLECTION = \"SET_COLLECTION\";\nexport const UPDATE_COLLECTION = \"UPDATE_COLLECTION\";\n","import * as actionTypes from \"./actionTypes\";\nimport { message } from \"antd\";\n\nimport { ICollection, CollectionAction, DispatchType } from \"../types/global\";\nimport {\n  deleteCollection,\n  getAllCollectionList,\n  upsertCollectionData,\n} from \"../http\";\nimport { AxiosResponse } from \"axios\";\n\nexport function addCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.ADD_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    await upsertCollectionData(collection);\n    dispatch(action);\n  };\n}\n\nexport function removeCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.REMOVE_COLLECTION,\n    collection,\n  };\n\n  return async (dispatch: DispatchType) => {\n    await deleteCollection(collection);\n    dispatch(action);\n  };\n}\n\nexport function selectCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.SET_COLLECTION,\n    collection,\n  };\n  return disPatchAction(action);\n}\n\nexport function updateCollection(collection: ICollection) {\n  const action: CollectionAction = {\n    type: actionTypes.UPDATE_COLLECTION,\n    collection,\n  };\n  return async (dispatch: DispatchType) => {\n    const key = \"updatable\";\n\n    message.loading({ content: \"Saving...\", key });\n    await upsertCollectionData(collection);\n    message.success({ content: \"Saved!\", key, duration: 2 });\n\n    dispatch(action);\n  };\n}\n\nconst disPatchAction = (collection: CollectionAction) => {\n  return (dispatch: DispatchType) => dispatch(collection);\n};\n\nexport const initData = () => async (dispatch: DispatchType) => {\n  let { data: initialState }: AxiosResponse = await getAllCollectionList();\n  const collection: CollectionAction = {\n    type: actionTypes.INIT_COLLECTION,\n    collections: initialState,\n    collection: initialState[0] || {},\n  };\n\n  dispatch(collection);\n};\n","import { useLocation } from \"react-router-dom\";\nimport { PageHeader } from \"antd\";\n\nfunction AppHeader() {\n  const location = useLocation();\n  const headerNames: any = {\n    \"\": \"Schema Flow\",\n    collections: \"Schema\",\n    data: \"Data Flow\",\n  };\n  const subHeaderNames: any = {\n    \"\": \"Visualize you database\",\n    collections: \"Manage your mongoose schema\",\n    data: \"Manage your data\",\n  };\n\n  const headerName = headerNames[location.pathname.split(\"/\")[1]];\n\n  const subHeaderName = subHeaderNames[location.pathname.split(\"/\")[1]];\n\n  if (headerName === \"Data Flow\") return null;\n  return (\n    <>\n      {headerName && (\n        <PageHeader ghost={false} title={headerName} subTitle={subHeaderName} />\n      )}\n    </>\n  );\n}\n\nexport default AppHeader;\n","import React, { useState } from \"react\";\nimport { Layout, Menu, Divider, Button, Space, Affix } from \"antd\";\nimport {\n  AlignCenterOutlined,\n  LineChartOutlined,\n  DatabaseOutlined,\n  FileOutlined,\n  ApiTwoTone,\n  ApiOutlined,\n  UserSwitchOutlined,\n  SlidersTwoTone,\n  SlidersOutlined,\n  CodeSandboxOutlined,\n  CodeSandboxCircleFilled,\n  PoweroffOutlined,\n  MailOutlined,\n} from \"@ant-design/icons\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst { Sider } = Layout;\n\nfunction SideBar() {\n  const location = useLocation();\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  const selectedMenu = location.pathname.split(\"/\")[1];\n\n  const pages = [\n    {\n      key: \"\",\n      to: \"/\",\n      name: \"Schema Flow\",\n      icon: <LineChartOutlined />,\n    },\n    {\n      key: \"collections\",\n      to: \"/collections\",\n      name: \"Collections\",\n      icon: <AlignCenterOutlined />,\n    },\n    {\n      key: \"data\",\n      to: \"/data\",\n      name: \"Data Flow\",\n      icon: <DatabaseOutlined />,\n    },\n  ];\n\n  const plugins = [\n    {\n      key: \"files\",\n      to: \"/files\",\n      name: \"Files\",\n      icon: <FileOutlined />,\n    },\n    {\n      key: \"auth\",\n      to: \"/auth\",\n      name: \"Auth\",\n      icon: <UserSwitchOutlined />,\n    },\n    {\n      key: \"emails\",\n      to: \"/emails\",\n      name: \"Email\",\n      icon: <MailOutlined />,\n    },\n  ];\n\n  return (\n    <>\n      <Sider\n        collapsible\n        width={200}\n        collapsedWidth={50}\n        collapsed={collapsed}\n        theme=\"dark\"\n        onCollapse={(collapsed, type) => {\n          setCollapsed(collapsed);\n        }}\n        style={{\n          height: \"100vh\",\n          overflow: \"auto\",\n        }}\n      >\n        <Menu\n          style={{ marginTop: 10 }}\n          mode=\"inline\"\n          defaultSelectedKeys={[selectedMenu]}\n          theme=\"dark\"\n        >\n          <Divider orientation=\"left\" style={{ color: \"white\" }}>\n            {collapsed ? (\n              <CodeSandboxCircleFilled color=\"white\" />\n            ) : (\n              <Space>\n                <CodeSandboxOutlined /> Core\n              </Space>\n            )}\n          </Divider>\n          {pages.map((page) => (\n            <Menu.Item key={page.key} icon={page.icon}>\n              <Link to={page.to}>{page.name}</Link>\n            </Menu.Item>\n          ))}\n\n          <Divider orientation=\"left\" style={{ color: \"white\" }}>\n            {collapsed ? (\n              <ApiTwoTone />\n            ) : (\n              <Space>\n                {\" \"}\n                <ApiOutlined /> Plugins{\" \"}\n              </Space>\n            )}\n          </Divider>\n          {plugins.map((plugin) => (\n            <Menu.Item key={plugin.key} icon={plugin.icon}>\n              <Link to={plugin.to}>{plugin.name}</Link>\n            </Menu.Item>\n          ))}\n        </Menu>\n\n        <Divider orientation=\"left\" style={{ color: \"white\" }}>\n          {collapsed ? (\n            <SlidersTwoTone />\n          ) : (\n            <Space>\n              <SlidersOutlined /> General\n            </Space>\n          )}\n        </Divider>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"start\",\n          }}\n        >\n          <Button\n            type=\"link\"\n            onClick={() => {\n              window.open(\"/admin/api-docs/\", \"_blank\").focus();\n            }}\n          >\n            {collapsed ? <b>API</b> : \"Api Documentation\"}\n          </Button>\n\n          <Button\n            type=\"link\"\n            onClick={() => {\n              localStorage.clear();\n              window.location.replace(\"/admin-ui\");\n            }}\n          >\n            {collapsed ? <PoweroffOutlined /> : \"Logout\"}\n          </Button>\n        </div>\n      </Sider>\n    </>\n  );\n}\n\nexport default SideBar;\n","export enum ESchemaTypes {\n  string = \"string\",\n  number = \"number\",\n  boolean = \"boolean\",\n  ref = \"ref\",\n  date = \"date\",\n  array = \"array\",\n  object = \"object\",\n  enums = \"enums\",\n  file = \"file\",\n  json = \"json\",\n  richText = \"richText\",\n}\n\nexport enum ERelationShip {\n  hasOne = \"hasone\",\n  hasMany = \"hasmany\",\n  none = \"none\",\n}\n\nexport interface ICollectionSchema {\n  name: string;\n  type: ESchemaTypes;\n  default?: any;\n  required?: boolean;\n  index?: boolean;\n  unique?: boolean;\n  lowercase?: boolean;\n  uppercase?: boolean;\n  trim?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  ref?: string;\n  relationship?: ERelationShip;\n  enum: Array<string>;\n  autopopulate: boolean;\n}\n\nexport interface ICrudOperations {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\nexport interface IPublicMethods {\n  list: boolean;\n  create: boolean;\n  read: boolean;\n  update: boolean;\n  delete: boolean;\n  deleteAll: boolean;\n}\n\nexport interface ICollection {\n  id: string;\n  name: string;\n  schema: any;\n  fields: number;\n  show: boolean;\n  operations: ICrudOperations;\n  publicMethods?: IPublicMethods;\n  x: Number;\n  y: Number;\n}\n\nexport type CollectionsState = {\n  collections: ICollection[];\n  selectedCollection: ICollection | undefined;\n  newCollection?: ICollection;\n};\n\nexport type CollectionAction = {\n  type: string;\n  collection: ICollection;\n  collections?: Array<ICollection>;\n};\n\nexport type DispatchType = (args: CollectionAction) => CollectionAction;\n","import { Tag } from \"antd\";\n\nimport { ESchemaTypes } from \"../types/global\";\n\nimport {\n  Arrow,\n  Bool,\n  Carret,\n  Calendar,\n  Component,\n  ContentType,\n  Dots,\n  Duplicate,\n  DynamicZone,\n  Email,\n  Enumeration,\n  Envelope,\n  Fail,\n  Grab,\n  GrabLarge,\n  Json,\n  Media,\n  NumberIcon,\n  Password,\n  Pencil,\n  Pending,\n  Play,\n  Plus,\n  Relation,\n  Sync,\n  Remove,\n  RichText,\n  SingleType,\n  Success,\n  Text,\n  Uid,\n} from \"@buffetjs/icons\";\n\nfunction Badge({ type }: { type: any }) {\n  type = type.toLowerCase();\n  const getBadgeColor = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"#f50\";\n      case ESchemaTypes.number:\n        return \"#FFC300\";\n      case ESchemaTypes.boolean:\n        return \"#52c41a\";\n      case ESchemaTypes.ref:\n        return \"#13c2c2\";\n      case ESchemaTypes.date:\n        return \"#1890ff\";\n      case ESchemaTypes.file:\n        return \"#2f54eb\";\n      case ESchemaTypes.json:\n        return \"#AF7AC5\";\n      case ESchemaTypes.richText.toLowerCase():\n        return \"#34495E\";\n      default:\n        return \"#8c8c8c\";\n    }\n  };\n\n  const getBadgeName = () => {\n    switch (type) {\n      case ESchemaTypes.string:\n        return \"Ab\";\n      case ESchemaTypes.number:\n        return \"123\";\n      case ESchemaTypes.boolean:\n        return <Bool key={type} />;\n      case ESchemaTypes.ref:\n        return <Relation key={type} />;\n      case ESchemaTypes.date:\n        return <Calendar key={type} />;\n      case ESchemaTypes.file:\n        return <Duplicate key={type} />;\n      case ESchemaTypes.json:\n        return \"{ }\";\n      case ESchemaTypes.richText.toLowerCase():\n        return <RichText />;\n      default:\n        return \"NA\";\n    }\n  };\n\n  return <Tag color={getBadgeColor()}>{getBadgeName()}</Tag>;\n}\n\nexport default Badge;\n","import { Typography } from 'antd'\n\nconst { Text } = Typography;\n\nexport default function RequiredText({ message = \"This field is required\" }: { message?: string }) {\n    return (\n        <Text type=\"danger\" style={{ fontSize: 12 }} strong >{message}</Text>\n    )\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Input, message, Checkbox, Tag, Space } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { pascalCase } from \"pascal-case\";\nimport { camelCase } from \"camel-case\";\n\nimport {\n  addCollection,\n  selectCollection,\n  updateCollection,\n} from \"../store/actionCreators\";\n\nimport { ICollection, ICrudOperations } from \"../types/global\";\n\nimport RequiredText from \"./common/RequiredText\";\n\nfunction NewCollectionModal({\n  collections,\n  isModalVisible,\n  setIsModalVisible,\n  edit,\n  selectedCollection,\n}: {\n  collections: Array<ICollection>;\n  isModalVisible: boolean;\n  setIsModalVisible: Function;\n  edit?: boolean;\n  selectedCollection?: ICollection;\n}) {\n  const [collectionName, setCollectionName] = useState(\n    selectedCollection ? selectedCollection.name : \"\"\n  );\n  const [showData, setShowData] = useState(true);\n  const [crudOperation, setCrudOperation] = useState<ICrudOperations>(\n    selectedCollection\n      ? selectedCollection.operations\n      : {\n          list: true,\n          create: true,\n          read: true,\n          update: true,\n          delete: true,\n          deleteAll: true,\n        }\n  );\n  const nameInput = useRef<any>();\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const newCollection = React.useCallback(\n    (collection: ICollection) => dispatch(addCollection(collection)),\n    [dispatch]\n  );\n\n  const setSelectedCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const error = () => {\n    message.error(\"Collection already exists\");\n  };\n\n  const handleOk = () => {\n    if (collectionName.length === 0) return;\n    if (!edit) {\n      if (\n        collections.find((collection) => collection.name === collectionName)\n      ) {\n        error();\n        return;\n      }\n      const col: ICollection = {\n        id: uuidv4(),\n        name: camelCase(collectionName),\n        schema: {},\n        fields: 0,\n        show: showData,\n        operations: crudOperation,\n        publicMethods: {\n          list: false,\n          create: false,\n          read: false,\n          update: false,\n          delete: false,\n          deleteAll: false,\n        },\n        x: Math.floor(collections.length % 4) * 300 + 20,\n        y: (Math.floor(collections.length / 4) + 1) * 60,\n      };\n      newCollection(col);\n      setSelectedCollection(col);\n      setCollectionName(\"\");\n    } else {\n      const col = {\n        ...selectedCollection,\n        name: collectionName,\n        show: showData,\n        operations: crudOperation,\n      };\n\n      updateCollectionAction(col);\n      setSelectedCollection(col);\n    }\n\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    if (nameInput.current) {\n      nameInput.current.focus();\n    }\n  }, []);\n  return (\n    <>\n      <Button className=\"button-blue\" onClick={showModal}>\n        {edit ? \"Edit\" : \"Create New\"}\n      </Button>\n      <Modal\n        title={\n          <span>\n            {\" \"}\n            <PlusOutlined /> Create new collection\n          </span>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            ref={nameInput}\n            placeholder=\"Collection Name\"\n            value={collectionName}\n            onChange={({ target: { value } }) => {\n              if (/[^a-zA-Z ]/.test(value)) return;\n              setCollectionName(value);\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleOk();\n              }\n            }}\n          />\n          {collectionName.length === 0 && <RequiredText />}\n\n          {pascalCase(collectionName)}\n          <Checkbox\n            onChange={() => setShowData(!showData)}\n            value={showData}\n            checked={showData}\n          >\n            {\" \"}\n            <b>Show on data flow ?</b>\n          </Checkbox>\n\n          <Tag color=\"geekblue\">Allowed Operations</Tag>\n          <div>\n            {Object.keys(crudOperation).map((key) => (\n              <Checkbox\n                onChange={() =>\n                  setCrudOperation({\n                    ...crudOperation,\n                    [key]: !crudOperation[key],\n                  })\n                }\n                checked={crudOperation[key]}\n                value={crudOperation[key]}\n              >\n                {\" \"}\n                <b>{key}</b>\n              </Checkbox>\n            ))}\n          </div>\n        </Space>\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionModal;\n","import { Space, Switch, Input } from \"antd\";\nimport React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Boolean({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"boolean\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            defaultValue={state.name}\n          />\n          <span>Default value</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.default}\n            onChange={(e) => updateState(\"default\", e)}\n          />\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Boolean;\n","import { Space, InputNumber, Input, Checkbox } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { useState, useEffect } from \"react\";\n\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n    (obj: T) =>\n      obj[key];\n\nfunction Number({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n  }, [state]);\n\n\n  return (\n    <>\n      {state.type === \"number\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <InputNumber\n            min={1}\n            max={10}\n            onChange={(e) => updateState(\"default\", e)}\n            placeholder={\"10\"}\n            style={{ width: \"100%\" }}\n          />\n\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{ width: \"100%\" }}\n            onChange={(e) => {\n              const settings: any = {\n                index: false,\n                required: false,\n                unique: false,\n              };\n\n              setState((prev: ICollectionSchema) => {\n                Object.keys(settings).forEach((key) => {\n                  if (e.includes(key)) {\n                    settings[key] = true;\n                  }\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Space direction=\"vertical\">\n              <Checkbox value=\"required\">Required</Checkbox>\n              <Checkbox value=\"index\">Index</Checkbox>\n              <Checkbox value=\"unique\">Unique</Checkbox>\n              <h4>Minimum Length</h4>\n              <InputNumber\n                min={0}\n                value={state.minLength || 0}\n                onChange={(number) => updateState(\"minLength\", number)}\n              />\n              <h4>Maximum Length</h4>\n\n              <InputNumber\n                min={0}\n                value={state.maxLength || 0}\n                onChange={(number) => updateState(\"maxLength\", number)}\n              />\n            </Space>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Number;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport React, { useEffect } from \"react\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n  CollectionsState,\n  ICollection,\n} from \"../../types/global\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction Ref({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  );\n\n  return (\n    <>\n      {state.type === \"ref\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            {collections.map(({ name }, index) => (\n              <Radio.Button\n                value={name}\n                style={{ textTransform: \"capitalize\" }}\n                key={index}\n              >\n                {name}\n              </Radio.Button>\n            ))}\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Ref;\n","import React, { useState, useEffect } from \"react\";\nimport { Space, Input, Checkbox, InputNumber, Row, Col, Tag } from \"antd\";\nimport { CheckboxValueType } from \"antd/lib/checkbox/Group\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nconst { TextArea } = Input;\nconst settings: any = {\n  index: false,\n  required: false,\n  trim: false,\n  unique: false,\n  uppercase: false,\n  lowercase: false,\n};\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction String({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const [typeSettings, setTypeSettings] = useState<Array<CheckboxValueType>>(\n    []\n  );\n\n  const [enumText, setEnumText] = useState(\"\");\n\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n  useEffect(() => {\n    const getStateSettings = Object.keys(state).filter(\n      (key: any) =>\n        Object.keys(settings).includes(key) &&\n        getKeyValue<keyof ICollectionSchema, ICollectionSchema>(key)(state)\n    );\n    setTypeSettings(getStateSettings);\n    if (state.enum.length) {\n      setEnumText(state.enum.join(\"\\n\"));\n    }\n  }, [state]);\n\n  return (\n    <>\n      {state.type === \"string\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n            value={state.name}\n          />\n          <RequiredText />\n          <span>Default value</span>\n          <Input\n            onChange={(e) => updateState(\"default\", e.target.value)}\n            value={state.default}\n            placeholder=\"Keep empty for not setting the value\"\n          />\n          <span>\n            Enums{\" \"}\n            <Tag color=\"geekblue\">\n              {enumText.length ? enumText.trim().split(\"\\n\").length : 0}\n            </Tag>{\" \"}\n          </span>\n\n          <TextArea\n            showCount\n            rows={10}\n            style={{ width: \"100%\", textTransform: \"lowercase\" }}\n            value={enumText}\n            placeholder=\"Keep empty for not setting the value\"\n            onChange={(e) => {\n              setEnumText(e.target.value.toLowerCase());\n            }}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                updateState(\"enum\", enumText.trim().split(\"\\n\"));\n              }\n            }}\n          />\n          <span>Settings</span>\n          <Checkbox.Group\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n            }}\n            onChange={(e) => {\n              setState((prev: ICollectionSchema) => {\n                if (!e.includes(\"maxLength\")) {\n                  prev[\"maxLength\"] = 0;\n                }\n                if (!e.includes(\"minLength\")) {\n                  prev[\"minLength\"] = 0;\n                }\n                Object.keys(settings).forEach((key: any) => {\n                  if (![\"maxLength\", \"minLength\"].includes(key))\n                    settings[key] = e.includes(key);\n                });\n                return { ...prev, ...settings };\n              });\n              setTypeSettings(e);\n            }}\n            value={typeSettings}\n          >\n            <Row>\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"required\">Required</Checkbox>\n                <Checkbox value=\"index\">Index</Checkbox>\n                <Checkbox value=\"unique\">Unique</Checkbox>\n                <Checkbox\n                  value=\"lowercase\"\n                  disabled={typeSettings.includes(\"uppercase\")}\n                >\n                  Lowercase\n                </Checkbox>\n                <Checkbox\n                  value=\"uppercase\"\n                  disabled={typeSettings.includes(\"lowercase\")}\n                >\n                  Uppercase\n                </Checkbox>\n              </Col>\n\n              <Col lg={12} className=\"d-flex-col\">\n                <Checkbox value=\"trim\">Trim</Checkbox>\n\n                <h4>Minimum Length</h4>\n                <InputNumber\n                  min={0}\n                  value={state.minLength || 0}\n                  onChange={(number) => updateState(\"minLength\", number)}\n                />\n                <h4>Maximum Length</h4>\n\n                <InputNumber\n                  min={0}\n                  value={state.maxLength || 0}\n                  onChange={(number) => updateState(\"maxLength\", number)}\n                />\n              </Col>\n            </Row>\n          </Checkbox.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default String;\n","import { Space, Input, DatePicker } from \"antd\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nfunction Date({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema & { name: string };\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <>\n      {state.type === \"date\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <span>Default value</span>\n          <DatePicker onChange={(e) => updateState(\"default\", e)} />\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default Date;\n","import { Radio, Space, Input, Switch } from \"antd\";\nimport {\n  ICollectionSchema,\n  ERelationShip,\n\n} from \"../../types/global\";\n\nimport RequiredText from \"../common/RequiredText\";\n\nfunction File({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n\n\n  return (\n    <>\n      {state.type === \"file\" && (\n        <Space direction=\"vertical\" style={{ width: \"100%\", overflow: \"auto\" }}>\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            value={state.name}\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n          <span>Relationship</span>\n          <Radio.Group\n            value={state.relationship}\n            onChange={(e) => updateState(\"relationship\", e.target.value)}\n          >\n            <Radio.Button value={ERelationShip.hasMany}>Has Many</Radio.Button>\n            <Radio.Button value={ERelationShip.hasOne}>Has One</Radio.Button>\n          </Radio.Group>\n\n          <span>Auto Populate</span>\n\n          <Radio.Group\n            onChange={(e) => updateState(\"autopopulate\", e.target.value)}\n            value={state.autopopulate}\n          >\n            <Radio value={true}>True</Radio>\n            <Radio value={false}>False</Radio>\n          </Radio.Group>\n\n          <span>Required</span>\n          <Switch\n            checkedChildren=\"true\"\n            unCheckedChildren=\"false\"\n            defaultChecked={state.required}\n            onChange={(e) => updateState(\"required\", e)}\n          />\n\n          <span>Ref</span>\n\n          <Radio.Group\n            value={state.ref}\n            onChange={(e) => updateState(\"ref\", e.target.value)}\n            style={{ height: \"300px\", overflow: \"auto\" }}\n          >\n            <Radio.Button\n              value={\"file\"}\n              style={{ textTransform: \"capitalize\" }}\n            >\n              File\n            </Radio.Button>\n          </Radio.Group>\n        </Space>\n      )}\n    </>\n  );\n}\n\nexport default File;\n","import React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport { Input, Space } from \"antd\";\nimport RequiredText from \"../common/RequiredText\";\n\nfunction JSON({\n    state,\n    setState,\n}: {\n    state: ICollectionSchema;\n    setState: Function;\n}) {\n    const updateState = (key: string, value: any) => {\n        const updatedData: any = {};\n        updatedData[key] = value;\n        setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n    };\n    return (\n        <div>\n            {state.type === \"json\" && (\n\n                <Space direction=\"vertical\">\n                    <span>Name for the type</span>\n                    <Input\n                        placeholder=\"Type Name\"\n                        onChange={(e) => updateState(\"name\", e.target.value)}\n                    />\n                    <RequiredText />\n                </Space>\n            )}\n        </div>\n    );\n}\n\nexport default JSON;\n","import React from \"react\";\nimport { ICollectionSchema } from \"../../types/global\";\n\nimport { Input, Space } from \"antd\";\nimport RequiredText from \"../common/RequiredText\";\nfunction RichText({\n  state,\n  setState,\n}: {\n  state: ICollectionSchema;\n  setState: Function;\n}) {\n  const updateState = (key: string, value: any) => {\n    const updatedData: any = {};\n    updatedData[key] = value;\n    setState((prev: ICollectionSchema) => ({ ...prev, ...updatedData }));\n  };\n  return (\n    <div>\n      {state.type === \"richText\" && (\n        <Space direction=\"vertical\">\n          <span>Name for the type</span>\n          <Input\n            placeholder=\"Type Name\"\n            onChange={(e) => updateState(\"name\", e.target.value)}\n          />\n          <RequiredText />\n        </Space>\n      )}\n    </div>\n  );\n}\n\nexport default RichText;\n","import { PlusOutlined } from \"@ant-design/icons\";\nimport { Dispatch } from \"redux\";\nimport { useDispatch } from \"react-redux\";\n\nimport { Space, Button, Radio, Modal, message } from \"antd\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Boolean from \"./DataTypes/Boolean\";\nimport Number from \"./DataTypes/Number\";\nimport Ref from \"./DataTypes/Ref\";\nimport String from \"./DataTypes/String\";\nimport Date from \"./DataTypes/Date\";\nimport File from \"./DataTypes/File\";\n\nimport {\n  ICollection,\n  ESchemaTypes,\n  ICollectionSchema,\n  ERelationShip,\n} from \"../types/global\";\nimport { updateCollection } from \"../store/actionCreators\";\nimport JSON from \"./DataTypes/JSON\";\nimport RichText from \"./DataTypes/RichText\";\n\nfunction NewCollectionTypeModal({\n  selectedCollection,\n  editSchema,\n}: {\n  selectedCollection: ICollection;\n  editSchema?: ICollectionSchema;\n}) {\n  // variables\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const error = () => {\n    message.error(\"Type already exist\");\n  };\n\n  // local state\n  const [state, setState] = useState<ICollectionSchema>({\n    name: \"\",\n    type: ESchemaTypes.string,\n    default: \"\",\n    index: false,\n    maxLength: 0,\n    minLength: 0,\n    required: false,\n    trim: false,\n    unique: false,\n    uppercase: false,\n    lowercase: false,\n    enum: [],\n    ref: \"none\",\n    relationship: ERelationShip.hasMany,\n    autopopulate: true,\n  });\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const resetState = () => {\n    setState({\n      name: \"\",\n      type: ESchemaTypes.string,\n      default: \"\",\n      index: false,\n      maxLength: 0,\n      minLength: 0,\n      required: false,\n      trim: false,\n      unique: false,\n      uppercase: false,\n      lowercase: false,\n      ref: \"none\",\n      relationship: ERelationShip.hasMany,\n      enum: [],\n      autopopulate: true,\n    });\n  };\n\n  useEffect(() => {\n    if (!isModalVisible) {\n      resetState();\n    }\n  }, [isModalVisible]);\n\n  useEffect(() => {\n    if (editSchema) {\n      setState(editSchema);\n      setIsModalVisible(true);\n    }\n  }, [editSchema]);\n\n  const footer = (\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        const schemas: any = {\n          ...selectedCollection.schema,\n        };\n        if (!editSchema && schemas[state.name]) {\n          error();\n          return;\n        }\n\n        schemas[state.name] = state;\n\n        const updatedCollection: ICollection = {\n          ...selectedCollection,\n          schema: schemas,\n          fields: Object.keys(schemas).length,\n        };\n        saveCollection(updatedCollection);\n        handleOk();\n      }}\n      disabled={state.name.length === 0}\n    >\n      {\"Save\"}\n    </Button>\n  );\n\n  return (\n    <>\n      <Button\n        type=\"primary\"\n        onClick={showModal}\n        style={{\n          width: \"100%\",\n          height: 50,\n          textTransform: \"uppercase\",\n          fontWeight: \"bold\",\n        }}\n      >\n        Add New Field\n      </Button>\n      <Modal\n        title={\n          <Space>\n            {\" \"}\n            <PlusOutlined />\n            <Radio.Group\n              onChange={(e) => {\n                setState((prev: any) => ({ ...prev, type: e.target.value }));\n              }}\n              value={state.type}\n            >\n              <Radio.Button value={ESchemaTypes.string}>String</Radio.Button>\n              <Radio.Button value={ESchemaTypes.boolean}>Boolean</Radio.Button>\n              <Radio.Button value={ESchemaTypes.number}>Number</Radio.Button>\n              <Radio.Button value={ESchemaTypes.ref}>Ref</Radio.Button>\n              <Radio.Button value={ESchemaTypes.date}>Date</Radio.Button>\n              <Radio.Button value={ESchemaTypes.file}>File</Radio.Button>\n              <Radio.Button value={ESchemaTypes.json}>JSON</Radio.Button>\n              <Radio.Button value={ESchemaTypes.richText}>\n                Rich Text\n              </Radio.Button>\n            </Radio.Group>\n          </Space>\n        }\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={footer}\n        width={800}\n      >\n        <String state={state} setState={setState} />\n        <Boolean state={state} setState={setState} />\n\n        <Number state={state} setState={setState} />\n\n        <Ref state={state} setState={setState} />\n        <Date state={state} setState={setState} />\n\n        <File state={state} setState={setState} />\n        <JSON state={state} setState={setState} />\n        <RichText state={state} setState={setState} />\n      </Modal>\n    </>\n  );\n}\n\nexport default NewCollectionTypeModal;\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  removeCollectionType,\n  collection,\n  key,\n}: {\n  removeCollectionType: Function;\n  collection: ICollection;\n  key: any;\n}) {\n  const deleteType = () => {\n    const { schema } = collection;\n    delete schema[key];\n    collection.schema = schema;\n    collection.fields = collection.fields - 1;\n    removeCollectionType(collection);\n  };\n\n  return confirm({\n    title: \"Sure you want to delete type?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteType();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import { Modal, message } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\nimport { ICollection } from \"../types/global\";\n\nconst { confirm } = Modal;\n\nfunction RemoveCollectionModal({\n  collection,\n  deleteCollectionAction,\n}: {\n  collection: ICollection;\n  deleteCollectionAction: Function;\n}) {\n  const deleteCollection = () => {\n    deleteCollectionAction(collection);\n    message.success(\"Collection removed\");\n  };\n\n  return confirm({\n    title: \"Sure you want to delete this collection?\",\n    icon: <ExclamationCircleOutlined />,\n    content: null,\n    onOk() {\n      deleteCollection();\n    },\n    onCancel() {\n      console.log(\"Cancel\");\n    },\n  });\n}\n\nexport default RemoveCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Row,\n  Col,\n  List,\n  Button,\n  Space,\n  Card,\n  Tag,\n  Layout,\n  Input,\n  PageHeader,\n  message,\n} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nimport Badge from \"../components/Badge\";\n\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  selectCollection,\n  updateCollection,\n  removeCollection,\n} from \"../store/actionCreators\";\n\nimport NewCollectionModal from \"../components/NewCollectionModal\";\nimport EditCollectionModal from \"../components/NewCollectionModal\";\nimport NewCollectionTypeModal from \"../components/NewCollectionTypeModal\";\nimport RemoveCollectionTypeModal from \"../components/RemoveCollectionTypeModal\";\nimport RemoveCollectionModal from \"../components/RemoveCollectionModal\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  ICollectionSchema,\n} from \"../types/global\";\n\nfunction CreateSchema() {\n  const [editSchema, setEditSchema] = useState<ICollectionSchema>();\n  const [openCollectionModal, setOpenCollectionModal] = useState(false);\n  const [editCollectionModal, setEditCollectionModal] = useState(false);\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [localCollections, setLocalCollections] = useState<Array<ICollection>>(\n    []\n  );\n\n  const selectedCollection: ICollection | undefined = useSelector(\n    (state: CollectionsState) => state.selectedCollection,\n    shallowEqual\n  );\n\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const setSelectCollection = React.useCallback(\n    (collection: ICollection) => dispatch(selectCollection(collection)),\n    [dispatch]\n  );\n\n  const removeCollectionType = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const saveCollection: any = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  const deleteCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(removeCollection(collection)),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (!selectedCollection && collections.length) {\n      setSelectCollection(collections[0]);\n    }\n    setLocalCollections(collections);\n  }, [collections]);\n\n  return (\n    <>\n      <Layout style={{ height: \"100%\", marginBottom: 50 }}>\n        {selectedCollection && (\n          <Row>\n            <Col className=\"gutter-row\" xs={24} sm={24} md={8} lg={6} xl={6}>\n              <PageHeader\n                title=\"Collections\"\n                extra={[\n                  <Tag color=\"green\">Total {collections.length}</Tag>,\n                  <NewCollectionModal\n                    collections={collections}\n                    isModalVisible={openCollectionModal}\n                    setIsModalVisible={setOpenCollectionModal}\n                  />,\n                ]}\n              />\n\n              <div style={{ padding: 10 }}>\n                <Input\n                  size=\"large\"\n                  placeholder=\"Search Collection\"\n                  onChange={(e) => {\n                    let searchCollections: Array<ICollection> = [];\n\n                    if (e.target.value.length) {\n                      searchCollections = collections.filter(\n                        (collection: ICollection) =>\n                          collection.name\n                            .trim()\n                            .toLowerCase()\n                            .includes(e.target.value.toLowerCase())\n                      );\n                      setLocalCollections(searchCollections);\n                    } else {\n                      setLocalCollections(collections);\n                    }\n                  }}\n                />\n              </div>\n\n              <List\n                itemLayout=\"horizontal\"\n                dataSource={localCollections}\n                className=\"collection-list\"\n                renderItem={(collection, index) => (\n                  <List.Item key={index}>\n                    <Tag\n                      key={index}\n                      style={{\n                        textTransform: \"capitalize\",\n                        cursor: \"pointer\",\n                        height: 55,\n                        width: \"100%\",\n                        display: \"grid\",\n                        placeItems: \"left\",\n                        fontSize: \"20px\",\n                        letterSpacing: 1.3,\n                        padding: 10,\n                      }}\n                      color={\n                        collection.name === selectedCollection?.name\n                          ? \"blue\"\n                          : collection.show\n                          ? \"default\"\n                          : \"error\"\n                      }\n                      onClick={() => {\n                        setSelectCollection(collection);\n                      }}\n                    >\n                      {collection.name}\n                      <span style={{ fontSize: 12 }}>\n                        {collection.fields} fields\n                        <span style={{ fontSize: 12, marginLeft: 10 }}>\n                          {collection.show ? null : \"Hidden\"}\n                        </span>\n                      </span>\n                    </Tag>\n                  </List.Item>\n                )}\n              />\n            </Col>\n            <Col className=\"gutter-row\" xs={24} sm={24} md={16} lg={18} xl={18}>\n              <PageHeader\n                title={\n                  <span style={{ textTransform: \"capitalize\" }}>\n                    {selectedCollection.name}\n                  </span>\n                }\n                extra={\n                  selectedCollection.show\n                    ? [\n                        <Space>\n                          <EditCollectionModal\n                            collections={collections}\n                            isModalVisible={editCollectionModal}\n                            setIsModalVisible={setEditCollectionModal}\n                            edit={true}\n                            selectedCollection={selectedCollection}\n                          />\n                          <Button\n                            className=\"button-green\"\n                            onClick={() => {\n                              saveCollection(selectedCollection);\n                              message.success(\"Collection Saved\");\n                            }}\n                          >\n                            Save\n                          </Button>\n                          <Button\n                            className=\"button-red\"\n                            onClick={() => {\n                              RemoveCollectionModal({\n                                deleteCollectionAction: deleteCollectionAction,\n                                collection: selectedCollection,\n                              });\n                            }}\n                          >\n                            Delete\n                          </Button>\n                        </Space>,\n                      ]\n                    : [<Tag color=\"geekblue\">Hidden</Tag>]\n                }\n              />\n\n              <Row>\n                <Col span={24}>\n                  <h5>Allowed Operations</h5>\n                  {Object.keys(selectedCollection.operations).map(\n                    (operation) => (\n                      <Tag\n                        color={\n                          selectedCollection.operations[operation]\n                            ? \"geekblue\"\n                            : \"volcano\"\n                        }\n                      >\n                        {operation}\n                      </Tag>\n                    )\n                  )}\n                </Col>\n              </Row>\n\n              <Row>\n                <Col span={24} style={{ paddingTop: 20 }}>\n                  <Card\n                    bordered={false}\n                    style={{ boxShadow: \"rgb(227 233 243) 0px 2px 4px\" }}\n                    title={\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <h1>{`${selectedCollection.fields} fields`} </h1>\n                      </div>\n                    }\n                    bodyStyle={{ padding: 0 }}\n                  >\n                    {Object.keys(selectedCollection.schema).map(\n                      (key: any, index) => {\n                        const schema: ICollectionSchema =\n                          selectedCollection.schema[key];\n                        const { type } = schema;\n                        return (\n                          <Row\n                            gutter={0}\n                            style={{\n                              height: 60,\n                              padding: 15,\n                              borderBottom: \"1px solid #f0f0f0\",\n                            }}\n                            align=\"middle\"\n                            key={index}\n                          >\n                            <Col span={6}>\n                              <Badge type={type} />\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  fontWeight: 500,\n                                }}\n                              >\n                                {key}\n                              </span>{\" \"}\n                            </Col>\n                            <Col span={6}>\n                              <span\n                                style={{\n                                  fontSize: 15,\n                                  color: \"#141414\",\n                                  textTransform: \"capitalize\",\n                                }}\n                              >\n                                {type}\n                              </span>{\" \"}\n                            </Col>\n                            <Col\n                              span={6}\n                              style={{\n                                display: \"flex\",\n                                justifyContent: \"flex-end\",\n                              }}\n                            >\n                              {selectedCollection.show && (\n                                <Space size={25}>\n                                  <EditOutlined\n                                    style={{ color: \"#8c8c8c\", fontSize: 20 }}\n                                    onClick={() =>\n                                      setEditSchema({ ...schema, name: key })\n                                    }\n                                  />\n\n                                  <DeleteOutlined\n                                    style={{ color: \"#cf1322\", fontSize: 20 }}\n                                    className=\"pointer\"\n                                    onClick={() =>\n                                      RemoveCollectionTypeModal({\n                                        removeCollectionType,\n                                        collection: selectedCollection,\n                                        key,\n                                      })\n                                    }\n                                  />\n                                </Space>\n                              )}\n                            </Col>\n                          </Row>\n                        );\n                      }\n                    )}\n                  </Card>\n                  <br />\n                  {selectedCollection.show && (\n                    <NewCollectionTypeModal\n                      selectedCollection={selectedCollection}\n                      editSchema={editSchema}\n                    />\n                  )}\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        )}\n      </Layout>\n    </>\n  );\n}\n\nexport default CreateSchema;\n","import { ICollection } from \"../types/global\";\nimport { useState } from \"react\";\nimport { CaretRightOutlined, CaretDownOutlined } from \"@ant-design/icons\";\nfunction SchemaView({ collection }: { collection: ICollection }) {\n  const dataSource = Object.keys(collection.schema).map((key, index) => ({\n    key: index,\n    field: key,\n    type: collection.schema[key].type,\n  }));\n\n  const [collapsed, setCollapsed] = useState(true);\n\n  return (\n    <>\n      <h2\n        style={{\n          backgroundColor: \"#1890ff\",\n          textTransform: \"capitalize\",\n          padding: 10,\n          color: \"white\",\n          letterSpacing: 1.5,\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          margin: 0,\n        }}\n      >\n        {collection.name}\n        <span\n          style={{ cursor: collapsed ? \"zoom-out\" : \"zoom-in\" }}\n          onClick={() => setCollapsed(!collapsed)}\n        >\n          {\" \"}\n          {!collapsed ? <CaretRightOutlined /> : <CaretDownOutlined />}{\" \"}\n        </span>\n      </h2>\n      {collapsed && (\n        <table style={{ width: \"100%\", transition: \"5s\" }}>\n          {dataSource.map((data) => (\n            <tr key={data.key}>\n              <td\n                style={{\n                  paddingLeft: 8,\n                  textAlign: \"left\",\n                  fontSize: 16,\n                  letterSpacing: 1.2,\n                }}\n              >\n                {data.field}\n              </td>\n              <td\n                style={{\n                  paddingRight: 8,\n                  textAlign: \"right\",\n                  fontSize: 14,\n                  letterSpacing: 1.2,\n                  color: \"#8c8c8c\",\n                }}\n              >\n                {data.type}\n              </td>\n            </tr>\n          ))}\n        </table>\n      )}\n    </>\n  );\n}\n\nexport default SchemaView;\n","import { useEffect, useState } from \"react\";\nimport ReactFlow from \"react-flow-renderer\";\nimport { useSelector } from \"react-redux\";\nimport { CollectionsState, ESchemaTypes, ICollection } from \"../types/global\";\nimport { upsertCollectionData } from \"../http\";\n\nimport SchemaView from \"../components/SchemaView\";\n\nconst SchemaFlowPage = () => {\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  );\n\n  const [collectionNodes, setCollectionNodes] = useState([]);\n\n  const checkIfRefExists = (\n    schema: any,\n    collectionName: string,\n    id: string\n  ) => {\n    let elementsNodes: any = [];\n    Object.keys(schema).forEach((key, index) => {\n      if (schema[key].type === ESchemaTypes.ref) {\n        elementsNodes.push({\n          id: `e1-${id}-${index}-${key}`,\n          source: collectionName,\n          target: schema[key].ref,\n          type: \"smoothstep\",\n          label: `${collectionName} ${schema[key].relationship} ${schema[key].ref}`,\n          animated: false,\n          labelStyle: {\n            textTransform: \"lowercase\",\n            fontSize: 20,\n            letterSpacing: 1.2,\n            backgroundColor: \"#ff9c6e\",\n          },\n          style: {\n            width: \"100%\",\n            padding: 20,\n            borderRadius: 5,\n          },\n        });\n      }\n    });\n\n    return elementsNodes;\n  };\n\n  const mapNodes = () => {\n    let nodes: any = [];\n\n    collections.forEach((collection: ICollection, index) => {\n      nodes.push({\n        id: collection.name,\n        data: {\n          label: (\n            <div>\n              <SchemaView collection={collection} />\n            </div>\n          ),\n        },\n        style: {\n          padding: 0,\n          width: \"300px\",\n          borderColor: \"#40a9ff\",\n          borderRadius: 0,\n        },\n        position: { x: collection.x, y: collection.y },\n      });\n      nodes.push(\n        ...checkIfRefExists(collection.schema, collection.name, collection.id)\n      );\n    });\n\n    setCollectionNodes(nodes);\n  };\n\n  useEffect(() => {\n    mapNodes();\n  }, [collections]);\n\n  const updateCollectionPosition = async (id: string, x: number, y: number) => {\n    let collection: ICollection | undefined = collections.find(\n      (collection) => collection.name === id\n    );\n    if (!collection) return;\n    try {\n      collection.x = x;\n      collection.y = y;\n      await upsertCollectionData(collection);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const position = localStorage.getItem(\"displayPosition\")\n    ? JSON.parse(localStorage.getItem(\"displayPosition\"))\n    : JSON.parse(`{\"x\":100,\"y\":100,\"zoom\":1}`);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        overflow: \"auto\",\n      }}\n    >\n      <ReactFlow\n        defaultPosition={[position.x, position.y]}\n        elements={collectionNodes}\n        minZoom={0.4}\n        defaultZoom={position.zoom}\n        snapToGrid={true}\n        snapGrid={[15, 15]}\n        onlyRenderVisibleElements={true}\n        onMove={(e) => {\n          localStorage.setItem(\"displayPosition\", JSON.stringify(e));\n        }}\n        onNodeDragStop={(event, node) => {\n          updateCollectionPosition(node.id, node.position.x, node.position.y);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SchemaFlowPage;\n","import { PageHeader, Tag, List } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\n\nfunction DataFlowPage() {\n  const history = useHistory();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  ).filter((collection) => collection.show);\n\n  return (\n    <>\n      <PageHeader\n        title=\"Available Collections\"\n        subTitle=\"Select any collection to view data\"\n        ghost={false}\n      />\n\n      <div className=\"grid-responsive\">\n        {collections.map((collection) => (\n          <Tag\n            style={{\n              paddingTop: 15,\n              paddingBottom: 15,\n              textTransform: \"capitalize\",\n              margin: 5,\n              letterSpacing: 1.2,\n              cursor: \"pointer\",\n              alignContent: \"center\",\n              paddingLeft: 30,\n              paddingRight: 30,\n              fontWeight: 600,\n              fontSize: 20,\n            }}\n            color=\"orange\"\n            onClick={() => {\n              history.push(\n                `/data/${collection.name}?action=list&page[number]=1&page[limit]=10`\n              );\n            }}\n          >\n            <span>{collection.name}</span>\n          </Tag>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default DataFlowPage;\n","import { useEffect, useState } from \"react\";\nimport {\n  PageHeader,\n  Button,\n  Tag,\n  Space,\n  Modal,\n  message,\n  Image,\n  Pagination,\n  Upload,\n  Checkbox,\n  Spin,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\nimport { PlusOutlined, FilterOutlined } from \"@ant-design/icons\";\n\nimport {\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  InboxOutlined,\n} from \"@ant-design/icons\";\n\nimport prettySize from \"prettysize\";\n\nimport packageJson from \"../../../package.json\";\n\nconst { confirm } = Modal;\nconst { Dragger } = Upload;\n\nfunction FilesView({\n  setCustomFiles,\n  deleteButton,\n  filterButton,\n  selectedFiles: defaultSelectedFiles = [],\n}: {\n  setCustomFiles?: Function;\n  deleteButton?: boolean;\n  filterButton?: boolean;\n  selectedFiles: Array<string>;\n}) {\n  const collectionName = \"file\";\n\n  const [list, setList] = useState<Array<any>>([]);\n\n  const [selectedFiles, setSelectedFiles] = useState(defaultSelectedFiles);\n\n  const [loading, setLoading] = useState(true);\n  const [uploadModal, setUploadModal] = useState(false);\n\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  useEffect(() => {\n    if (typeof setCustomFiles === \"function\") {\n      setCustomFiles([...selectedFiles]);\n    }\n  }, [selectedFiles]);\n\n  const props = {\n    multiple: true,\n    name: \"manual\",\n    action: \"/admin/file/manual\",\n    headers: {\n      authorization: localStorage.getItem(\"token\"),\n    },\n    defaultFileList: [],\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== \"uploading\") {\n      }\n      if (status === \"done\") {\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === \"error\") {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n\n      info.fileList = [];\n    },\n    onDrop(e) {\n      console.log(\"Dropped files\", e.dataTransfer.files);\n    },\n  };\n\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setList(data.list);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: selectedFiles,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setSelectedFiles([]);\n      getCollectionList(collectionName, pagination);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getCollectionList(collectionName, pagination);\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <div style={{ padding: 20 }}>\n          <Spin />\n        </div>\n      ) : (\n        <>\n          <PageHeader\n            style={{ marginTop: 2 }}\n            ghost={true}\n            title={\n              <Space>\n                {pagination?.total > 0 && (\n                  <Tag color=\"green\">Total {pagination.total}</Tag>\n                )}\n\n                <Tag color=\"blue\">Selected {selectedFiles.length}</Tag>\n              </Space>\n            }\n            extra={[\n              selectedFiles.length && deleteButton ? (\n                <Button\n                  onClick={() => {\n                    return confirm({\n                      title: \"Sure you want to delete selected records?\",\n                      icon: <ExclamationCircleOutlined />,\n                      content: null,\n                      onOk() {\n                        deleteManyRecord();\n                      },\n                      onCancel() {\n                        console.log(\"Cancel\");\n                      },\n                    });\n                  }}\n                >\n                  <DeleteOutlined />\n                  Delete\n                </Button>\n              ) : null,\n              filterButton && (\n                <Button key=\"2\">\n                  <FilterOutlined />\n                  Filter\n                </Button>\n              ),\n              <Button\n                key=\"1\"\n                type=\"primary\"\n                onClick={() => {\n                  setUploadModal(true);\n                }}\n              >\n                <PlusOutlined />\n                Upload\n              </Button>,\n            ]}\n          />\n\n          <div className=\"grid-responsive\">\n            {list.map((l) => (\n              <div\n                key={l._id}\n                className=\"on-hover\"\n                style={{\n                  border: selectedFiles.includes(l._id)\n                    ? \"1px solid #40a9ff\"\n                    : \"none\",\n                  backgroundColor: \"white\",\n                }}\n              >\n                <Checkbox\n                  style={{ padding: 10, position: \"absolute\", zIndex: 99 }}\n                  checked={selectedFiles.includes(l._id)}\n                  onChange={() => {\n                    setSelectedFiles((prev: any) => {\n                      let tempArray = [...prev];\n                      if (tempArray.includes(l._id)) {\n                        tempArray = tempArray.filter(\n                          (fileId) => fileId !== l._id\n                        );\n                      } else {\n                        tempArray.push(l._id);\n                      }\n                      return tempArray;\n                    });\n                  }}\n                ></Checkbox>\n                <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n                  <Image\n                    preview={false}\n                    width={150}\n                    height={150}\n                    src={\"/admin/file/get/\" + l.filename}\n                    fallback={\"/img/file.svg\"}\n                  />\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    padding: 10,\n                  }}\n                >\n                  <b>{l.originalname}</b>\n                  <span\n                    style={{\n                      color: \"GrayText\",\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                    }}\n                  >\n                    {prettySize(l.size)} {l.mimetype}\n                  </span>\n                  <div>\n                    <Tag color=\"orange\">{l.fieldname}</Tag>\n                  </div>\n                </div>\n                <Button\n                  style={{ float: \"right\", margin: 5 }}\n                  type=\"link\"\n                  onClick={() => {\n                    window\n                      .open(packageJson.proxy + \"/admin/file/get/\" + l.filename)\n                      .focus();\n                  }}\n                >\n                  Open\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          <Pagination\n            style={{ textAlign: \"right\", margin: 10 }}\n            current={pagination.current}\n            pageSize={pagination.pageSize}\n            total={pagination.total}\n            onChange={(page, pageSize) => {\n              const p = {\n                current: page,\n                pageSize: pageSize,\n                total: pagination.total,\n              };\n              getCollectionList(collectionName, p);\n            }}\n          />\n          <Modal\n            title=\"Upload File\"\n            visible={uploadModal}\n            onOk={() => {\n              getCollectionList(collectionName, pagination);\n              setUploadModal(false);\n            }}\n            onCancel={() => setUploadModal(false)}\n            destroyOnClose={true}\n          >\n            <Dragger {...props} className=\"upload-list-inline\">\n              <p className=\"ant-upload-drag-icon\">\n                <InboxOutlined />\n              </p>\n              <p className=\"ant-upload-text\">\n                Click or drag file to this area to upload\n              </p>\n              <p className=\"ant-upload-hint\">\n                Support for a single or bulk upload. Strictly prohibit from\n                uploading company data or other band files\n              </p>\n            </Dragger>\n          </Modal>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default FilesView;\n","import { PageHeader } from \"antd\";\n\nimport FilesView from \"../components/File/FilesView\";\n\nfunction FilePage() {\n  return (\n    <>\n      <PageHeader title=\"File Management\" ghost={false} />\n\n      <FilesView deleteButton={true} selectedFiles={[]} />\n    </>\n  );\n}\n\nexport default FilePage;\n","import React from \"react\";\nimport { PageHeader, Checkbox, Space, message, Row, Col, Tag } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CollectionsState, ICollection } from \"../types/global\";\nimport { Dispatch } from \"redux\";\nimport { updateCollection } from \"../store/actionCreators\";\n\nconst key = \"updatable\";\n\nfunction AuthPage() {\n  const dispatch: Dispatch<any> = useDispatch();\n\n  const collections: ICollection[] = useSelector(\n    (state: CollectionsState) => state.collections\n  ).filter((collection) => collection.show);\n\n  const updateCollectionAction = React.useCallback(\n    (collection: ICollection) => dispatch(updateCollection(collection)),\n    [dispatch]\n  );\n\n  function onChange(collection: ICollection, checkedValues) {\n    message.loading({ content: \"Saving...\", key });\n\n    const allMethods = {\n      list: false,\n      create: false,\n      read: false,\n      update: false,\n      delete: false,\n      deleteAll: false,\n    };\n    checkedValues.forEach((value) => {\n      allMethods[value] = true;\n    });\n\n    collection.publicMethods = allMethods;\n\n    updateCollectionAction(collection);\n  }\n\n  const parseOptions = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {}).map((method) => ({\n      label: method,\n      value: `${method}`,\n    }));\n  };\n\n  const parseDefaults = (collection: ICollection) => {\n    return Object.keys(collection.publicMethods || {})\n      .filter((method) => collection.publicMethods[method])\n      .map((method) => `${method}`);\n  };\n\n  const style = { background: \"#0092ff\", padding: \"8px 0\" };\n\n  return (\n    <div>\n      <PageHeader\n        title=\"Auth Management\"\n        subTitle=\"Public routes available\"\n        ghost={false}\n      />\n\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n        {collections.map((collection: ICollection) => {\n          return (\n            <Col className=\"gutter-row\" span={12}>\n              <PageHeader\n                title={<Tag>{collection.name}</Tag>}\n                style={{ textTransform: \"capitalize\" }}\n              />\n              <PageHeader>\n                <Checkbox.Group\n                  options={parseOptions(collection)}\n                  defaultValue={parseDefaults(collection)}\n                  onChange={(checkedValues) =>\n                    onChange(collection, checkedValues)\n                  }\n                />\n              </PageHeader>\n            </Col>\n          );\n        })}\n      </Row>\n      <br />\n      <br />\n    </div>\n  );\n}\n\nexport default AuthPage;\n","import React, { useState, useEffect } from \"react\";\nimport { PageHeader, Row, Col, Tree, Button } from \"antd\";\nimport { useSelector } from \"react-redux\";\nimport { CarryOutOutlined } from \"@ant-design/icons\";\nimport {\n    ICollection,\n    CollectionsState,\n} from \"../types/global\";\n\n\nfunction ApiDocsPage() {\n    const [selectedCollection, setSelectedCollection] = useState({\n        collection: \"\",\n        method: \"\",\n    });\n\n\n    const collections: ICollection[] = useSelector(\n        (state: CollectionsState) => state.collections\n    );\n\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\n        const [collection, method] = selectedKeys[0].toString().split(\"-\");\n        if (method) {\n            setSelectedCollection({\n                collection,\n                method,\n            });\n        } else {\n            setSelectedCollection({\n                collection,\n                method: data.find((model) => model.title === collection).children[0]\n                    .title,\n            });\n        }\n    };\n\n    const data = collections\n        .filter((collection: ICollection) => collection.show)\n        .map((collection: ICollection) => ({\n            title: collection.name,\n            key: collection.name,\n            icon: <CarryOutOutlined />,\n            children: [\n                {\n                    title: \"list\",\n                    key: `${collection.name}-list`,\n                    icon: <CarryOutOutlined />,\n                },\n\n                {\n                    title: \"create\",\n                    key: `${collection.name}-create`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"read\",\n                    key: `${collection.name}-read`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"update\",\n                    key: `${collection.name}-update`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"delete\",\n                    key: `${collection.name}-delete`,\n                    icon: <CarryOutOutlined />,\n                },\n                {\n                    title: \"deleteAll\",\n                    key: `${collection.name}-deleteAll`,\n                    icon: <CarryOutOutlined />,\n                },\n            ].filter((method: any) => collection.operations[method.title]),\n        }))\n        .filter((d) => d.children.length);\n\n\n\n    useEffect(() => {\n        if (data.length) {\n            setSelectedCollection({\n                collection: data[0].title,\n                method: data[0].children[0].title,\n            });\n        }\n    }, []);\n\n\n    return (\n        <div>\n            <PageHeader\n                title=\"Api Documentation\"\n                subTitle=\"Powered by swagger.io\"\n                ghost={false}\n                extra={[\n                    <Button\n                        className=\"button-blue\"\n                        onClick={() => {\n                            window\n                                .open(\"http://localhost:3002/admin/api-docs/\", \"_blank\")\n                                .focus();\n                        }}\n                    >\n                        Open docs\n                    </Button>,\n                ]}\n            />\n\n            <Row>\n                <Col lg={3} style={{ height: \"100vh\" }}>\n                    <Tree\n                        showLine={true}\n                        showIcon={false}\n                        defaultExpandParent={true}\n                        onSelect={onSelect}\n                        treeData={data}\n                        style={{\n                            backgroundColor: \"transparent\",\n                            padding: 20,\n                            height: \"100vh\",\n                        }}\n                    />\n                </Col>\n                <Col lg={21} style={{ height: \"100vh\" }}>\n                    <PageHeader\n                        title={\n                            <span style={{ textTransform: \"capitalize\" }}>\n                                {selectedCollection?.collection}\n                            </span>\n                        }\n                        subTitle={`${selectedCollection.method}`}\n                    ></PageHeader>\n                    <Row>\n\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    );\n}\n\nexport default ApiDocsPage;\n","import React, { useState } from \"react\";\nimport { Input, Button, message, Space } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\nimport { loginAdmin } from \"../http\";\nimport { Link } from \"react-router-dom\";\n\nfunction LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        flexDirection: \"column\",\n        paddingTop: 200,\n        alignItems: \"center\",\n      }}\n    >\n      <img src=\"/img/blue.svg\" alt=\"\" width={200} />\n      <br />\n      <div\n        style={{\n          height: 120,\n          width: 300,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n          <Input.Password\n            placeholder=\"Password\"\n            iconRender={(visible) =>\n              visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n            }\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={async () => {\n              const { data, headers } = await loginAdmin({\n                email,\n                password,\n              });\n\n              if (headers.role !== \"admin\") {\n                message.error(\"User not allowed\");\n                return;\n              } else if (data.status) {\n                localStorage.setItem(\"token\", data.token);\n                message.success(data.message);\n                setTimeout(() => {\n                  window.location.replace(\"/admin-ui\");\n                }, 1000);\n              } else {\n                message.error(data.message);\n              }\n            }}\n          >\n            Login\n          </Button>\n          <Link\n            to=\"/register\"\n            style={{ marginTop: 10, padding: 5, textAlign: \"center\" }}\n          >\n            Register\n          </Link>\n        </Space>\n      </div>\n    </div>\n  );\n}\n\nexport default LoginPage;\n","import React, { useState } from \"react\";\nimport { Input, Button, message, Space } from \"antd\";\nimport { EyeInvisibleOutlined, EyeTwoTone } from \"@ant-design/icons\";\nimport { registerAdmin } from \"../http\";\nimport { Link } from \"react-router-dom\";\n\nfunction RegisterPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        height: \"100vh\",\n        flexDirection: \"column\",\n        paddingTop: 200,\n        alignItems: \"center\",\n      }}\n    >\n      <img src=\"/img/black-logo.png\" alt=\"\" width={300} />\n      <br />\n      <div\n        style={{\n          height: 120,\n          width: 300,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <Space direction=\"vertical\">\n          <Input\n            placeholder=\"Email\"\n            onChange={(e) => {\n              setEmail(e.target.value);\n            }}\n          />\n          <Input.Password\n            placeholder=\"Password\"\n            iconRender={(visible) =>\n              visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n            }\n            onChange={(e) => {\n              setPassword(e.target.value);\n            }}\n          />\n          <Button\n            type=\"primary\"\n            onClick={async () => {\n              const { data } = await registerAdmin({\n                email,\n                password,\n              });\n\n              if (data.status) {\n                message.success(data.message);\n                setTimeout(() => {\n                  window.location.replace(\"/admin-ui\");\n                }, 1000);\n              } else {\n                message.error(data.message);\n              }\n            }}\n          >\n            Register\n          </Button>\n          <Link\n            to=\"/login\"\n            style={{ marginTop: 10, padding: 5, textAlign: \"center\" }}\n          >\n            Login\n          </Link>\n        </Space>\n      </div>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n","import { useEffect, useState } from \"react\";\nimport { Form } from \"antd\";\nimport FilesView from \"../../components/File/FilesView\";\n\nfunction UploadFile({\n  schemaValue,\n  form,\n  selectedRecord,\n  action,\n}: {\n  schemaValue: any;\n  form: any;\n  selectedRecord: any;\n  action: any;\n}) {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      [schemaValue.name]: selectedFiles,\n    });\n  }, [selectedFiles]);\n\n  const s =\n    action === \"update\" && selectedRecord[schemaValue.name]\n      ? selectedRecord[schemaValue.name].map(({ _id }) => _id)\n      : [];\n\n  return (\n    <>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            {schemaValue.name}\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n      >\n        <div>\n          <FilesView setCustomFiles={setSelectedFiles} selectedFiles={s} />\n        </div>\n      </Form.Item>\n    </>\n  );\n}\n\nexport default UploadFile;\n","import { Form } from \"antd\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport { useState } from \"react\";\n\nfunction JSONEditor({\n  schemaValue,\n  form,\n  action,\n  selectedRecord,\n}: {\n  schemaValue: any;\n  form: any;\n  action: string;\n  selectedRecord: any;\n}) {\n  const [jsonData, setJsonData] = useState(\n    action === \"update\" && selectedRecord[schemaValue.name]\n      ? selectedRecord[schemaValue.name]\n      : {}\n  );\n\n  return (\n    <Form.Item\n      label={\n        <span\n          style={{\n            textTransform: \"capitalize\",\n            color: \"#434343\",\n          }}\n        >\n          {schemaValue.name}\n        </span>\n      }\n      name={schemaValue.name}\n      rules={[\n        {\n          required: schemaValue.required,\n        },\n      ]}\n    >\n      <div style={{ border: \"1px solid #161f59\", borderRadius: 1 }}>\n        <JSONInput\n          theme=\"dark_mitsuketa_tribute\"\n          locale={locale}\n          placeholder={{ ...jsonData }}\n          onChange={(e) => {\n            form.setFieldsValue({\n              [schemaValue.name]: { ...e.jsObject },\n            });\n            setJsonData(e.jsObject);\n          }}\n          height=\"550px\"\n          width=\"100%\"\n        />\n      </div>\n    </Form.Item>\n  );\n}\n\nexport default JSONEditor;\n","import { CKEditor } from \"@ckeditor/ckeditor5-react\";\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport { useState } from \"react\";\nimport { Form } from \"antd\";\n\nfunction RichTextEditor({\n  schemaValue,\n  form,\n  action,\n  selectedRecord,\n}: {\n  schemaValue: any;\n  form: any;\n  action: string;\n  selectedRecord: any;\n}) {\n  const [richTextData, setRichTextData] = useState(\n    action === \"update\" && selectedRecord[schemaValue.name]\n      ? selectedRecord[schemaValue.name]\n      : \"<p>Start Editing</p>\"\n  );\n  return (\n    <div style={{ marginTop: 10, marginBottom: 10 }}>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            {schemaValue.name}\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n      >\n        <CKEditor\n          editor={ClassicEditor}\n          data={richTextData}\n          config={{\n            ckfinder: {\n              uploadUrl: \"/admin/file/upload\",\n              options: {\n                resourceType: \"Images\",\n              },\n            },\n          }}\n          onError={(error) => {\n            console.log(error);\n          }}\n          onReady={(editor) => {\n            // You can store the \"editor\" and use when it is needed.\n          }}\n          onChange={(event, editor) => {\n            const data = editor.getData();\n            form.setFieldsValue({\n              [schemaValue.name]: data,\n            });\n            setRichTextData(data);\n          }}\n          onBlur={(event, editor) => {}}\n          onFocus={(event, editor) => {}}\n        />\n      </Form.Item>\n    </div>\n  );\n}\n\nexport default RichTextEditor;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n  Drawer,\n} from \"antd\";\nimport {\n  CollectionsState,\n  ICollection,\n  ICollectionSchema,\n} from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport RichTextEditor from \"./RichTextEditor\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\nfunction CreateCollectionModal({\n  collectionName,\n  handleOk,\n}: {\n  collectionName: string;\n  handleOk: Function;\n}) {\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const schema = selectedCollection.schema;\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations: EOperations.create,\n        data: {\n          body: formData,\n        },\n      };\n      const { data } = await crudCollection(body);\n      message.success(\"Data Saved\");\n      form.resetFields();\n      handleOk(data._id);\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <Form\n      name=\"basic\"\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      layout=\"vertical\"\n      size=\"large\"\n      form={form}\n    >\n      {schema &&\n        Object.keys(schema).map((key: any) => {\n          const schemaValue = getKeyValue<\n            keyof ICollectionSchema,\n            ICollectionSchema\n          >(key)(schema);\n\n          switch (schemaValue.type) {\n            case \"string\":\n              return (\n                <Form.Item\n                  label={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                      }}\n                    >\n                      {schemaValue.name}\n                    </span>\n                  }\n                  name={schemaValue.name}\n                  rules={[\n                    {\n                      required: schemaValue.required,\n                    },\n                  ]}\n                >\n                  {schemaValue.enum.length ? (\n                    <Select placeholder={`Select ${schemaValue.name}`}>\n                      <>\n                        {schemaValue.enum.map((e: any) => (\n                          <Option value={e}>{e}</Option>\n                        ))}\n                      </>\n                    </Select>\n                  ) : (\n                    <TextArea />\n                  )}\n                </Form.Item>\n              );\n\n            case \"number\":\n              return (\n                <Form.Item\n                  label={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                      }}\n                    >\n                      {schemaValue.name}\n                    </span>\n                  }\n                  name={schemaValue.name}\n                  rules={[\n                    {\n                      required: schemaValue.required,\n                    },\n                  ]}\n                >\n                  <InputNumber style={{ width: 300 }} />\n                </Form.Item>\n              );\n            case \"date\":\n              return (\n                <Form.Item\n                  label={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                      }}\n                    >\n                      {schemaValue.name}\n                    </span>\n                  }\n                  name={schemaValue.name}\n                  rules={[\n                    {\n                      required: schemaValue.required,\n                    },\n                  ]}\n                >\n                  <DatePicker />\n                </Form.Item>\n              );\n            case \"boolean\":\n              return (\n                <Form.Item\n                  label={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        color: \"#434343\",\n                      }}\n                    >\n                      {schemaValue.name}\n                    </span>\n                  }\n                  name={schemaValue.name}\n                  rules={[\n                    {\n                      required: schemaValue.required,\n                    },\n                  ]}\n                  initialValue={\"false\"}\n                >\n                  <Select placeholder={`Select`}>\n                    <Option value={\"true\"}>True</Option>\n                    <Option value={\"false\"}>False</Option>\n                  </Select>\n                </Form.Item>\n              );\n            case \"ref\":\n              return (\n                <RefSelect\n                  action={\"create\"}\n                  selectedRecord={{}}\n                  schemaValue={schemaValue}\n                />\n              );\n            case \"file\":\n              return (\n                <UploadFile\n                  schemaValue={schemaValue}\n                  form={form}\n                  selectedRecord={{}}\n                  action={\"create\"}\n                />\n              );\n            case \"json\":\n              return (\n                <JSONEditor\n                  action={\"create\"}\n                  selectedRecord={{}}\n                  schemaValue={schemaValue}\n                  form={form}\n                />\n              );\n\n            case \"richText\":\n              return (\n                <RichTextEditor\n                  action={\"create\"}\n                  selectedRecord={{}}\n                  schemaValue={schemaValue}\n                  form={form}\n                />\n              );\n\n            default:\n              return null;\n          }\n        })}\n\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          {\"Save\"}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n}\n\nexport default CreateCollectionModal;\n","import React, { useState, useEffect } from \"react\";\nimport { Select, Form, Space, Button, Drawer, Row, Col, Modal } from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../../http\";\nimport CreateCollectionModal from \"./CreateCollectionModal\";\n\nconst { Option } = Select;\n\nfunction RefSelect({\n  schemaValue,\n  action,\n  selectedRecord,\n}: {\n  schemaValue: any;\n  action: string;\n  selectedRecord: any;\n}) {\n  const [data, setData] = useState<Array<any>>([]);\n  const [search, setSearch] = useState<string>(\"\");\n  const [searchValues, setSearchValues] = useState<Array<string>>([]);\n  const [value, setValue] = useState<Array<string>>([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = (dataId) => {\n    makeSearch(dataId);\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const makeSearch = async (dataId?) => {\n    try {\n      const action: ICurdBody = {\n        model: schemaValue.ref,\n        operations: EOperations.ref,\n        data: {\n          query: {\n            search: search,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setData(data.list);\n      setSearchValues(data.searchValues);\n      if (dataId)\n        setValue((prev) => {\n          return schemaValue.relationship === \"hasmany\"\n            ? [...prev, dataId]\n            : dataId;\n        });\n    } catch (error) {}\n  };\n\n  const options = data.map((d) => (\n    <Option value={d._id}>\n      {searchValues.map((value) => (d[value]?.length ? `${d[value]}` : d._id))}\n    </Option>\n  ));\n\n  useEffect(() => {\n    makeSearch();\n  }, [search]);\n\n  return (\n    <>\n      <Form.Item\n        label={\n          <span\n            style={{\n              textTransform: \"capitalize\",\n              color: \"#434343\",\n            }}\n          >\n            <Space>\n              {schemaValue.name}\n\n              <Button size=\"small\" type=\"primary\" onClick={showModal}>\n                Add\n              </Button>\n            </Space>\n          </span>\n        }\n        name={schemaValue.name}\n        rules={[\n          {\n            required: schemaValue.required,\n          },\n        ]}\n        initialValue={\n          action === \"update\" && selectedRecord[schemaValue.name]\n            ? !Array.isArray(selectedRecord[schemaValue.name])\n              ? [selectedRecord[schemaValue.name]._id]\n              : selectedRecord[schemaValue.name].map(\n                  (value) => value._id || value\n                )\n            : value\n        }\n      >\n        <Select\n          showSearch\n          value={value}\n          placeholder={`Search anything in ${schemaValue.name}`}\n          defaultActiveFirstOption={true}\n          showArrow={false}\n          filterOption={false}\n          onSearch={(s) => setSearch(s)}\n          onChange={(v) => {\n            setValue(v);\n          }}\n          notFoundContent={<span>Not found</span>}\n          mode={schemaValue.relationship === \"hasmany\" ? \"multiple\" : undefined}\n        >\n          {options.length > 0 && options}\n        </Select>\n      </Form.Item>\n      <Drawer\n        title={\"Create Data - \" + schemaValue.name}\n        visible={isModalVisible}\n        width={600}\n        style={{ padding: 0 }}\n        onClose={handleCancel}\n      >\n        {isModalVisible && (\n          <CreateCollectionModal\n            collectionName={schemaValue.ref}\n            handleOk={handleOk}\n          />\n        )}\n      </Drawer>\n    </>\n  );\n}\n\nexport default RefSelect;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport {\n  CollectionsState,\n  ICollection,\n  ICollectionSchema,\n} from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\";\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport RichTextEditor from \"./RichTextEditor\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction CreateCollectionAction() {\n  const history = useHistory();\n\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const schema = selectedCollection.schema;\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    createData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const createData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations: \"create\" ? EOperations.create : EOperations.update,\n        data: {\n          body: formData,\n          id: queryParams.id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  return (\n    <div>\n      <PageHeader onBack={() => window.history.back()} title={\"Create New\"} />\n      <Card\n        style={{ marginLeft: 10, marginRight: 10 }}\n        title={\n          <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n            {selectedCollection?.name}\n          </span>\n        }\n      >\n        <Form\n          name=\"basic\"\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n          layout=\"vertical\"\n          size=\"large\"\n          form={form}\n        >\n          {schema &&\n            Object.keys(schema).map((key: any) => {\n              const schemaValue = getKeyValue<\n                keyof ICollectionSchema,\n                ICollectionSchema\n              >(key)(schema);\n\n              switch (schemaValue.type) {\n                case \"string\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      {schemaValue.enum.length ? (\n                        <Select placeholder={`Select ${schemaValue.name}`}>\n                          <>\n                            {schemaValue.enum.map((e: any) => (\n                              <Option value={e}>{e}</Option>\n                            ))}\n                          </>\n                        </Select>\n                      ) : (\n                        <TextArea />\n                      )}\n                    </Form.Item>\n                  );\n\n                case \"number\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      <InputNumber style={{ width: 300 }} />\n                    </Form.Item>\n                  );\n                case \"date\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                    >\n                      <DatePicker />\n                    </Form.Item>\n                  );\n                case \"boolean\":\n                  return (\n                    <Form.Item\n                      label={\n                        <span\n                          style={{\n                            textTransform: \"capitalize\",\n                            color: \"#434343\",\n                          }}\n                        >\n                          {schemaValue.name}\n                        </span>\n                      }\n                      name={schemaValue.name}\n                      rules={[\n                        {\n                          required: schemaValue.required,\n                        },\n                      ]}\n                      initialValue={\"false\"}\n                    >\n                      <Select placeholder={`Select`}>\n                        <Option value={\"true\"}>True</Option>\n                        <Option value={\"false\"}>False</Option>\n                      </Select>\n                    </Form.Item>\n                  );\n                case \"ref\":\n                  return (\n                    <RefSelect\n                      action={\"create\"}\n                      selectedRecord={{}}\n                      schemaValue={schemaValue}\n                    />\n                  );\n                case \"file\":\n                  return (\n                    <UploadFile\n                      schemaValue={schemaValue}\n                      form={form}\n                      selectedRecord={{}}\n                      action={\"create\"}\n                    />\n                  );\n                case \"json\":\n                  return (\n                    <JSONEditor\n                      action={\"create\"}\n                      selectedRecord={{}}\n                      schemaValue={schemaValue}\n                      form={form}\n                    />\n                  );\n\n                case \"richText\":\n                  return (\n                    <RichTextEditor\n                      action={\"create\"}\n                      selectedRecord={{}}\n                      schemaValue={schemaValue}\n                      form={form}\n                    />\n                  );\n\n                default:\n                  return null;\n              }\n            })}\n\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {\"Save\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Card>\n    </div>\n  );\n}\n\nexport default CreateCollectionAction;\n","import { PageHeader, Card, Space } from \"antd\";\nimport { CollectionsState, ICollection } from \"../../types/global\";\n\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\nimport Text from \"antd/lib/typography/Text\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction ShowCollectionAction() {\n  const history = useHistory();\n  const [selectedRecord, setSelectedRecord] = useState<any>();\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const getRecordData = async () => {\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.read,\n        data: {\n          id: queryParams.id,\n        },\n      };\n      const { data } = await crudCollection(action);\n\n      setSelectedRecord(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedRecord && queryParams.id) {\n      getRecordData();\n    }\n  }, [queryParams]);\n  return (\n    <div style={{ marginBottom: 60 }}>\n      {selectedRecord && (\n        <>\n          <PageHeader\n            onBack={() => window.history.back()}\n            title={selectedCollection.name}\n            style={{ textTransform: \"capitalize\" }}\n            ghost={false}\n          />\n          <Card style={{ margin: 10 }}>\n            <div>\n              {Object.keys(selectedRecord).map((key: any) => {\n                console.log(selectedRecord[key]);\n                return (\n                  key !== \"key\" && (\n                    <div>\n                      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n                        <Text\n                          style={{ textTransform: \"capitalize\" }}\n                          type=\"secondary\"\n                        >\n                          {key}\n                        </Text>\n\n                        <p>\n                          {Array.isArray(selectedRecord[key]) ? (\n                            selectedRecord[key].map((data: any) => (\n                              <DisplayData data={data} />\n                            ))\n                          ) : typeof selectedRecord[key] === \"object\" ? (\n                            <DisplayData data={selectedRecord[key]} />\n                          ) : (\n                            selectedRecord[key].toString()\n                          )}\n                        </p>\n                      </Space>\n                      <br />\n                    </div>\n                  )\n                );\n              })}\n            </div>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n\nconst DisplayData = (data: any) => {\n  data = data[\"data\"];\n  return (\n    <div\n      style={{\n        borderLeft: \"6px solid #1890ff\",\n        border: \"1px dotted #1890ff\",\n        padding: 10,\n        margin: 2,\n        width: \"100%\",\n      }}\n    >\n      {typeof data === \"string\"\n        ? data\n        : Object.keys(data).map((key: any) => {\n            return (\n              <>\n                <Space direction=\"vertical\">\n                  <Text\n                    style={{ textTransform: \"capitalize\" }}\n                    type=\"secondary\"\n                  >\n                    {key}\n                  </Text>\n                  <p>\n                    {typeof data[key] === \"object\" ? (\n                      <DisplayData data={data[key]} />\n                    ) : (\n                      data[key]\n                    )}\n                  </p>\n                </Space>\n                <br />\n              </>\n            );\n          })}\n    </div>\n  );\n};\n\nexport default ShowCollectionAction;\n","import {\n  PageHeader,\n  Card,\n  Input,\n  Form,\n  Button,\n  Select,\n  message,\n  InputNumber,\n  DatePicker,\n} from \"antd\";\nimport {\n  CollectionsState,\n  ICollection,\n  ICollectionSchema,\n} from \"../../types/global\";\nimport { crudCollection, EOperations, ICurdBody } from \"../../http\";\nimport moment from \"moment\";\nimport RefSelect from \"../DataFlow/RefSelect\";\nimport UploadFile from \"./UploadFile\";\nimport JSONEditor from \"./JSONEditor\";\nimport { useHistory, useParams } from \"react-router\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport queryString from \"query-string\";\nimport { useEffect, useState } from \"react\";\nimport RichTextEditor from \"./RichTextEditor\";\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction UpdateCollectionAction() {\n  const history = useHistory();\n  const [selectedRecord, setSelectedRecord] = useState<any>();\n  const { collection: collectionName }: any = useParams();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const selectedCollection: ICollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    updateData(values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log(\"Failed:\", errorInfo);\n  };\n\n  const updateData = async (formData: any) => {\n    try {\n      const body: ICurdBody = {\n        model: selectedCollection?.name || \"\",\n        operations: EOperations.update,\n        data: {\n          body: formData,\n          id: queryParams.id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Data Saved\");\n      window.history.back();\n    } catch (error: any) {\n      message.error(error.response.data);\n      console.log(error);\n    }\n  };\n\n  const getRecordData = async () => {\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.read,\n        data: {\n          id: queryParams.id,\n        },\n      };\n      const { data } = await crudCollection(action);\n\n      setSelectedRecord(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedRecord && queryParams.id) {\n      getRecordData();\n    }\n  }, [queryParams]);\n\n  return (\n    <>\n      {selectedRecord && (\n        <div>\n          <PageHeader onBack={() => window.history.back()} title={\"Edit\"} />\n          <Card\n            style={{ marginLeft: 10, marginRight: 10 }}\n            title={\n              <span style={{ letterSpacing: 1.2, textTransform: \"capitalize\" }}>\n                {selectedCollection?.name}\n              </span>\n            }\n          >\n            <Form\n              name=\"basic\"\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n              layout=\"vertical\"\n              size=\"large\"\n              form={form}\n            >\n              {selectedCollection.schema &&\n                Object.keys(selectedCollection.schema).map((key: any) => {\n                  const schemaValue = getKeyValue<\n                    keyof ICollectionSchema,\n                    ICollectionSchema\n                  >(key)(selectedCollection.schema);\n\n                  switch (schemaValue.type) {\n                    case \"string\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                              enum: [\"male\", \"female\"],\n                            },\n                          ]}\n                          initialValue={selectedRecord[schemaValue.name]}\n                        >\n                          {schemaValue.enum.length ? (\n                            <Select placeholder={`Select ${schemaValue.name}`}>\n                              <>\n                                {schemaValue.enum.map((e: any) => (\n                                  <Option value={e}>{e}</Option>\n                                ))}\n                              </>\n                            </Select>\n                          ) : (\n                            <TextArea />\n                          )}\n                        </Form.Item>\n                      );\n\n                    case \"number\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={selectedRecord[schemaValue.name]}\n                        >\n                          <InputNumber style={{ width: 300 }} />\n                        </Form.Item>\n                      );\n                    case \"date\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={moment(\n                            selectedRecord[schemaValue.name]\n                          )}\n                        >\n                          <DatePicker />\n                        </Form.Item>\n                      );\n                    case \"boolean\":\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          rules={[\n                            {\n                              required: schemaValue.required,\n                            },\n                          ]}\n                          initialValue={selectedRecord[\n                            schemaValue.name\n                          ]?.toString()}\n                        >\n                          <Select placeholder={`Select`}>\n                            <Option value={\"true\"}>True</Option>\n                            <Option value={\"false\"}>False</Option>\n                          </Select>\n                        </Form.Item>\n                      );\n                    case \"ref\":\n                      return (\n                        <RefSelect\n                          action={\"update\"}\n                          selectedRecord={selectedRecord}\n                          schemaValue={schemaValue}\n                        />\n                      );\n                    case \"file\":\n                      return (\n                        <UploadFile\n                          schemaValue={schemaValue}\n                          form={form}\n                          selectedRecord={selectedRecord}\n                          action={\"update\"}\n                        />\n                      );\n                    case \"json\":\n                      return (\n                        <JSONEditor\n                          action={\"update\"}\n                          selectedRecord={selectedRecord}\n                          schemaValue={schemaValue}\n                          form={form}\n                        />\n                      );\n\n                    case \"richText\":\n                      return (\n                        <RichTextEditor\n                          action={\"update\"}\n                          selectedRecord={selectedRecord}\n                          schemaValue={schemaValue}\n                          form={form}\n                        />\n                      );\n\n                    default:\n                      return null;\n                  }\n                })}\n\n              <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  {\"Update\"}\n                </Button>\n              </Form.Item>\n            </Form>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default UpdateCollectionAction;\n","import {\n  Button,\n  Input,\n  Space,\n  Form,\n  Row,\n  Col,\n  Select,\n  InputNumber,\n  DatePicker,\n  Badge,\n  Drawer,\n} from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport { CaretRightOutlined, FilterOutlined } from \"@ant-design/icons\";\nimport queryString from \"query-string\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport { ICollection, ICollectionSchema } from \"../../types/global\";\nimport moment from \"moment\";\nimport RefSelect from \"./RefSelect\";\n\nconst { Option } = Select;\n\nconst getKeyValue =\n  <U extends keyof T, T extends object>(key: U) =>\n  (obj: T) =>\n    obj[key];\n\nfunction TableFilter({\n  selectedCollection,\n}: {\n  selectedCollection: ICollection;\n}) {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const queryParams: any = queryString.parse(history.location.search);\n  const [collapsed, setCollapsed] = useState(false);\n\n  const schema = selectedCollection?.schema;\n\n  const handleSearch = (values: any) => {\n    let query: any = queryString.parse(history.location.search);\n    Object.keys(values).forEach((key) => {\n      if (values[key] && values[key].length > 0) {\n        query[`filter[${key}][$regex]`] = `.*${values[key]}.*`;\n      }\n    });\n    handleFilterChange(query);\n  };\n\n  const handleFilterChange = (query) => {\n    query = decodeURI(queryString.stringify(query));\n    history.replace(`/data/${collectionName}?${query}`);\n  };\n\n  const clearFilter = () => {\n    let query: any = queryString.parse(history.location.search);\n    let resetQuery = {\n      action: query[\"action\"],\n      \"page[limit]\": query[\"page[limit]\"],\n      \"page[number]\": query[\"page[number]\"],\n    };\n    handleFilterChange(resetQuery);\n    setCollapsed(false);\n  };\n\n  return (\n    <>\n      <Badge count={Object.keys(queryParams).length - 3}>\n        <Button\n          onClick={() => {\n            setCollapsed(!collapsed);\n          }}\n        >\n          Filter <FilterOutlined />\n        </Button>\n      </Badge>\n      <Drawer\n        title={\"Filters\"}\n        visible={collapsed && schema}\n        width={400}\n        style={{ padding: 0 }}\n        onClose={() => setCollapsed(false)}\n      >\n        <Row>\n          <Col span={24}>\n            <Form\n              name=\"basic\"\n              onFinish={handleSearch}\n              onFinishFailed={() => {}}\n              layout=\"vertical\"\n              size=\"large\"\n              style={{\n                overflowY: \"auto\",\n                height: \"100vh\",\n              }}\n            >\n              {schema &&\n                Object.keys(schema).map((key: any) => {\n                  const schemaValue = getKeyValue<\n                    keyof ICollectionSchema,\n                    ICollectionSchema\n                  >(key)(schema);\n                  let initial;\n                  switch (schemaValue.type) {\n                    // case \"ref\":\n                    //   initial = queryParams[\n                    //     `filter[${schemaValue.name}][$regex]`\n                    //   ]\n                    //     ? queryParams[\n                    //         `filter[${schemaValue.name}][$regex]`\n                    //       ].replaceAll(\".*\", \"\")\n                    //     : \"\";\n                    //   return (\n                    //     <RefSelect\n                    //       schemaValue={schemaValue}\n                    //       action={\"create\"}\n                    //       selectedRecord={selectedCollection}\n                    //     />\n                    //   );\n\n                    case \"string\":\n                      initial = queryParams[\n                        `filter[${schemaValue.name}][$regex]`\n                      ]\n                        ? queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ].replaceAll(\".*\", \"\")\n                        : \"\";\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          initialValue={initial}\n                        >\n                          {schemaValue.enum.length ? (\n                            <Select placeholder={`Select ${schemaValue.name}`}>\n                              <>\n                                {schemaValue.enum.map((e: any) => (\n                                  <Option value={e}>{e}</Option>\n                                ))}\n                              </>\n                            </Select>\n                          ) : (\n                            <Input />\n                          )}\n                        </Form.Item>\n                      );\n\n                    case \"number\":\n                      initial = queryParams[\n                        `filter[${schemaValue.name}][$regex]`\n                      ]\n                        ? queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ].replaceAll(\".*\", \"\")\n                        : \"\";\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          initialValue={initial}\n                        >\n                          <InputNumber style={{ width: 300 }} />\n                        </Form.Item>\n                      );\n                    case \"date\":\n                      initial = queryParams[\n                        `filter[${schemaValue.name}][$regex]`\n                      ]\n                        ? queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ].replaceAll(\".*\", \"\")\n                        : null;\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          initialValue={initial && moment(initial)}\n                        >\n                          <DatePicker />\n                        </Form.Item>\n                      );\n                    case \"boolean\":\n                      initial = queryParams[\n                        `filter[${schemaValue.name}][$regex]`\n                      ]\n                        ? queryParams[\n                            `filter[${schemaValue.name}][$regex]`\n                          ].replaceAll(\".*\", \"\")\n                        : null;\n                      return (\n                        <Form.Item\n                          label={\n                            <span\n                              style={{\n                                textTransform: \"capitalize\",\n                                color: \"#434343\",\n                              }}\n                            >\n                              {schemaValue.name}\n                            </span>\n                          }\n                          name={schemaValue.name}\n                          initialValue={initial}\n                        >\n                          <Select placeholder={`Select`}>\n                            <Option value={\"true\"}>True</Option>\n                            <Option value={\"false\"}>False</Option>\n                          </Select>\n                        </Form.Item>\n                      );\n\n                    default:\n                      return null;\n                  }\n                })}\n\n              <Form.Item\n                style={{\n                  position: \"fixed\",\n                  bottom: 10,\n                  display: \"flex\",\n                  width: \"100%\",\n                }}\n              >\n                <Space>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Search\n                  </Button>\n                  <Button onClick={clearFilter}>Clear</Button>\n                </Space>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </Drawer>\n    </>\n  );\n}\n\nexport { TableFilter };\n","import { useEffect, useState } from \"react\";\nimport {\n  Table,\n  PageHeader,\n  Button,\n  Tag,\n  Modal,\n  message,\n  Breadcrumb,\n  Image,\n  Space,\n  Menu,\n  Dropdown,\n  BackTop,\n} from \"antd\";\nimport { ICurdBody, crudCollection, EOperations } from \"../http\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { CollectionsState } from \"../types/global\";\nimport queryString from \"query-string\";\nimport CreateCollectionAction from \"../components/DataFlow/CreateCollectionAction\";\nimport ShowCollectionAction from \"../components/DataFlow/ShowCollectionAction\";\nimport {\n  EditOutlined,\n  DeleteOutlined,\n  ExclamationCircleOutlined,\n  EyeOutlined,\n  MoreOutlined,\n  MenuOutlined,\n} from \"@ant-design/icons\";\n\nimport moment from \"moment\";\nimport prettySize from \"prettysize\";\nimport UpdateCollectionAction from \"../components/DataFlow/UpdateCollectionAction\";\nimport { TableFilter } from \"../components/DataFlow/TableFilter\";\nimport useBreadcrumbs from \"use-react-router-breadcrumbs\";\n\nconst { Column } = Table;\nconst { confirm } = Modal;\ninterface IQueryParams {\n  action?: string;\n  id?: string;\n}\n\nfunction DataFlowDetailPage() {\n  const { collection: collectionName }: any = useParams();\n  const history = useHistory();\n  const queryParams: IQueryParams = queryString.parse(history.location.search);\n  const query = history.location.search;\n  const [list, setList] = useState<Array<{ name: string; type: string }>>([]);\n  const [columns, setColumns] = useState([]);\n  const breadcrumbs = useBreadcrumbs();\n\n  const [loading, setLoading] = useState(true);\n  const [rowSelection, setRowSelection] = useState<any>([]);\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const selectedCollection = useSelector(\n    (state: CollectionsState) => state.collections,\n    shallowEqual\n  )\n    .filter((collection) => collection.show)\n    .find((c) => c.name === collectionName);\n\n  const getCollectionList = async (model: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {},\n      };\n      const { data } = await crudCollection(action, query);\n      setPagination(data.pagination);\n      setList(data.list);\n      setColumns(data.column);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteRecord = async (id: string) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.delete,\n        data: {\n          id: id,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Record Deleted\");\n      getCollectionList(collectionName);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  const deleteManyRecord = async () => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.deleteAll,\n        data: {\n          id: rowSelection,\n        },\n      };\n      await crudCollection(action);\n      message.success(\"Records Deleted\");\n      setRowSelection([]);\n      getCollectionList(collectionName);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (selectedCollection && queryParams[\"action\"] === \"list\") {\n      setColumns([]);\n      setList([]);\n      getCollectionList(collectionName);\n    }\n  }, [collectionName, selectedCollection, window.location.href]);\n\n  const dataSource = list\n    ? list.map((l: any, index) => ({ key: index, ...l }))\n    : [];\n\n  const dataColumns: any = columns\n    ? columns.map(\n        ({\n          name,\n          type,\n          file,\n          ref,\n        }: {\n          name: string;\n          type: string;\n          file: boolean;\n          ref: string;\n        }) => ({\n          title: name.toString(),\n          dataIndex: name.toString(),\n          key: name.toString(),\n          type,\n          file,\n          ref,\n        })\n      )\n    : [];\n\n  dataColumns.push({\n    title: \"Action\",\n    key: \"operation\",\n    fixed: \"right\",\n    width: 20,\n    type: \"operation\",\n  });\n\n  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\n    let query: any = queryString.parse(history.location.search);\n    query[\"page[number]\"] = pagination.current;\n    query[\"page[limit]\"] = pagination.pageSize;\n    query = decodeURI(queryString.stringify(query));\n    history.replace(`/data/${selectedCollection.name}?${query}`);\n  };\n\n  if (\n    queryParams.action &&\n    queryParams.action === \"create\" &&\n    selectedCollection\n  )\n    return <CreateCollectionAction />;\n  if (\n    queryParams.action &&\n    queryParams.action === \"update\" &&\n    selectedCollection\n  )\n    return <UpdateCollectionAction />;\n\n  if (queryParams.action && queryParams.action === \"show\" && selectedCollection)\n    return <ShowCollectionAction />;\n\n  return (\n    <>\n      <BackTop />\n\n      <PageHeader\n        style={{ marginTop: 2 }}\n        ghost={false}\n        onBack={() => window.history.back()}\n        title={\n          <Space>\n            <span style={{ textTransform: \"capitalize\" }}>\n              {collectionName}{\" \"}\n            </span>\n            {pagination?.total > 0 && (\n              <Tag color=\"geekblue\">{pagination.total}</Tag>\n            )}\n            <Breadcrumb>\n              {breadcrumbs.map(({ match, breadcrumb }) => (\n                <Breadcrumb.Item>\n                  <Link to={match.url}>{breadcrumb}</Link>\n                </Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          </Space>\n        }\n        extra={[\n          rowSelection.length ? (\n            <Button\n              onClick={() => {\n                return confirm({\n                  title: \"Sure you want to delete selected records?\",\n                  icon: <ExclamationCircleOutlined />,\n                  content: null,\n                  onOk() {\n                    deleteManyRecord();\n                  },\n                  onCancel() {\n                    console.log(\"Cancel\");\n                  },\n                });\n              }}\n            >\n              <DeleteOutlined />\n              Delete\n            </Button>\n          ) : null,\n          <TableFilter selectedCollection={selectedCollection} />,\n          <Button\n            key=\"1\"\n            type=\"primary\"\n            onClick={() => {\n              history.push(`/data/${collectionName}?action=create`);\n            }}\n          >\n            <PlusOutlined />\n            Create\n          </Button>,\n        ]}\n      ></PageHeader>\n      <Table\n        loading={loading}\n        style={{\n          padding: 10,\n        }}\n        scroll={{ x: \"100vw\" }}\n        dataSource={dataSource}\n        size=\"middle\"\n        rowKey={(record) => record._id}\n        rowSelection={{\n          selectedRowKeys: rowSelection,\n          onChange: (selectedRows) => {\n            setRowSelection(selectedRows);\n          },\n        }}\n        pagination={pagination}\n        onChange={handleTableChange}\n      >\n        {dataColumns.map((column: any) => {\n          switch (column.type) {\n            case \"objectId\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>ID</span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  fixed=\"left\"\n                  width={220}\n                />\n              );\n            case \"boolean\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={200}\n                  render={(text, record, index) => {\n                    if (text === undefined) return null;\n                    return (\n                      <>\n                        {text ? (\n                          <Tag\n                            color={\"green\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        ) : (\n                          <Tag\n                            color={\"red\"}\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text.toString()}\n                          </Tag>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n\n            case \"date\":\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={200}\n                  render={(text: Date) => {\n                    return text ? (\n                      <span>{moment(text).format(\"MM/DD/YYYY hh:mm\")}</span>\n                    ) : null;\n                  }}\n                />\n              );\n\n            case \"json\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      <Tag color=\"magenta\">JSON</Tag>\n                    </span>\n                  }\n                  width={200}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: any) => {\n                    return text ? (\n                      <span>\n                        {Object.keys(text).map((key) => (\n                          <Tag>{key}</Tag>\n                        ))}\n                      </span>\n                    ) : null;\n                  }}\n                />\n              );\n\n            case \"richText\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      <Tag color=\"gold\">RichText</Tag>\n                    </span>\n                  }\n                  width={200}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text: any) => {\n                    return (\n                      <div\n                        dangerouslySetInnerHTML={{\n                          __html: `${text.toString().substring(0, 40)}`,\n                        }}\n                      ></div>\n                    );\n                  }}\n                />\n              );\n            case \"operation\":\n              return (\n                <Column\n                  title={\n                    <Space>\n                      <MenuOutlined />\n                    </Space>\n                  }\n                  width={30}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  fixed=\"right\"\n                  render={(text, record: any) => {\n                    return (\n                      <Dropdown\n                        overlay={\n                          <Menu>\n                            <Menu.Item>\n                              <Button\n                                style={{ width: \"100%\" }}\n                                className=\"button-blue\"\n                                icon={<EyeOutlined />}\n                                onClick={() => {\n                                  history.push(\n                                    `/data/${collectionName}?action=show&id=${record._id}`\n                                  );\n                                }}\n                              >\n                                View\n                              </Button>\n                            </Menu.Item>\n                            <Menu.Item>\n                              <Button\n                                style={{ width: \"100%\" }}\n                                className=\"button-green\"\n                                icon={<EditOutlined />}\n                                onClick={() => {\n                                  history.push(\n                                    `/data/${collectionName}?action=update&id=${record._id}`\n                                  );\n                                }}\n                              >\n                                Edit\n                              </Button>\n                            </Menu.Item>\n                            <Menu.Item>\n                              <Button\n                                icon={<DeleteOutlined />}\n                                className=\"button-red\"\n                                onClick={() => {\n                                  return confirm({\n                                    title:\n                                      \"Sure you want to delete this record?\",\n                                    icon: <ExclamationCircleOutlined />,\n                                    content: null,\n                                    onOk() {\n                                      deleteRecord(record._id);\n                                    },\n                                    onCancel() {\n                                      console.log(\"Cancel\");\n                                    },\n                                  });\n                                }}\n                              >\n                                Delete\n                              </Button>\n                            </Menu.Item>\n                          </Menu>\n                        }\n                        placement=\"bottomLeft\"\n                      >\n                        <MoreOutlined\n                          style={{ cursor: \"pointer\", maxHeight: 10 }}\n                        />\n                      </Dropdown>\n                    );\n                  }}\n                />\n              );\n            case \"hasone\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">File</Tag>}\n                    </span>\n                  }\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  width={200}\n                  render={(text) => {\n                    return (\n                      text && (\n                        <Space direction=\"vertical\">\n                          {column.file ? (\n                            <Space>\n                              <Image\n                                preview={false}\n                                width={100}\n                                height={100}\n                                src={\"/admin/file/get/\" + text.filename}\n                                fallback={\"/img/file.svg\"}\n                              />\n\n                              <span\n                                style={{\n                                  color: \"GrayText\",\n                                  display: \"flex\",\n                                  justifyContent: \"space-between\",\n                                  flexDirection: \"column\",\n                                }}\n                              >\n                                <b>{text.originalname}</b>\n                                {prettySize(text.size)} {text.mimetype}\n                              </span>\n                            </Space>\n                          ) : typeof text === \"string\" ? (\n                            <Link\n                              to={`/data/${\n                                column.ref\n                                  ? column.ref.toLowerCase()\n                                  : column.name\n                              }?action=show&id=${text}`}\n                            >\n                              <span>{text} </span>\n                            </Link>\n                          ) : (\n                            Object.values(text).map((value, index) => {\n                              if (!(typeof value === \"string\")) return null;\n                              if (index === 1) return <span>{value} </span>;\n                              return null;\n                            })\n                          )}\n                        </Space>\n                      )\n                    );\n                  }}\n                />\n              );\n            case \"hasmany\":\n              return (\n                <Column\n                  title={\n                    <span\n                      style={{\n                        textTransform: \"capitalize\",\n                        display: \"flex\",\n                        justifyContent: \"space-around\",\n                      }}\n                    >\n                      {column.title}\n\n                      {column.file && <Tag color=\"cyan\">Files</Tag>}\n                    </span>\n                  }\n                  width={200}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text) => {\n                    return (\n                      <span>\n                        {text?.length} {column.title}\n                      </span>\n                    );\n                  }}\n                ></Column>\n              );\n            default:\n              return (\n                <Column\n                  title={\n                    <span style={{ textTransform: \"capitalize\" }}>\n                      {column.title}\n                    </span>\n                  }\n                  width={200}\n                  dataIndex={column.dataIndex}\n                  key={column.key}\n                  render={(text = \"\") => {\n                    return (\n                      <>\n                        {selectedCollection.schema[column.key].enum.length >\n                        0 ? (\n                          <Tag\n                            color=\"geekblue\"\n                            style={{ textTransform: \"capitalize\" }}\n                          >\n                            {text?.toString()}\n                          </Tag>\n                        ) : (\n                          <span>\n                            {text?.toString().slice(0, 80)}\n                            {text?.toString().length > 80 ? \"...\" : null}\n                          </span>\n                        )}\n                      </>\n                    );\n                  }}\n                />\n              );\n          }\n        })}\n      </Table>\n    </>\n  );\n}\n\nexport default DataFlowDetailPage;\n","import {\n  Button,\n  Card,\n  Col,\n  Input,\n  message,\n  Modal,\n  PageHeader,\n  Row,\n  Space,\n  Spin,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { crudCollection, EOperations, ICurdBody } from \"../http\";\nimport ReactJson from \"react-json-view\";\nimport { Link } from \"react-router-dom\";\nimport Text from \"antd/lib/typography/Text\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\n\nfunction EmailPage() {\n  const collectionName = \"email\";\n\n  const [emailList, setEmailList] = useState<Array<any>>([]);\n\n  const [loading, setLoading] = useState(true);\n\n  const [emailData, setEmailData] = useState<any>({\n    name: \"\",\n    config: \"\",\n    subject: \"\",\n    emailCode: \"\",\n    html: \"\",\n    cc: \"\",\n    bcc: \"\",\n  });\n  const emailHtml = \"<h1>Update your template here !</h1>\";\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const [pagination, setPagination] = useState<{\n    current: number;\n    pageSize: number;\n    total?: number;\n  }>({\n    current: 1,\n    pageSize: 10,\n  });\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    updateData();\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const updateDataState = (key, value) => {\n    setEmailData({ ...emailData, [key]: value });\n  };\n\n  const updateData = async () => {\n    try {\n      const body: ICurdBody = {\n        model: collectionName || \"\",\n        operations: EOperations.create,\n        data: {\n          body: {\n            ...emailData,\n            html: emailHtml,\n          },\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Template Saved\");\n    } catch (error: any) {\n      console.log(error);\n    }\n  };\n  const getCollectionList = async (model: string, pagination: any) => {\n    setLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: model,\n        operations: EOperations.list,\n        data: {\n          query: {\n            pagination: pagination,\n          },\n        },\n      };\n      const { data } = await crudCollection(action);\n      setPagination(data.pagination);\n      setEmailList(data.list);\n    } catch (error) {\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getCollectionList(collectionName, pagination);\n  }, []);\n  return (\n    <div>\n      <PageHeader\n        title=\"Emails\"\n        ghost={false}\n        extra={[\n          <Button className=\"button-green\" onClick={() => showModal()}>\n            Create\n          </Button>,\n        ]}\n      />\n      {loading ? (\n        <Spin style={{ padding: 20 }} />\n      ) : (\n        <div>\n          <Row>\n            {emailList.map((email) => (\n              <Col span={6} style={{ padding: 20 }}>\n                <Card\n                  size=\"small\"\n                  title={email.name}\n                  extra={<Link to={`/emails/${email._id}`}>Preview</Link>}\n                >\n                  <code>{email.emailCode}</code>\n                  <br />\n                  <br />\n                  <ReactJson\n                    src={email.config}\n                    defaultValue={{}}\n                    name=\"config\"\n                    collapsed\n                  />\n                </Card>\n              </Col>\n            ))}\n          </Row>\n          <Modal\n            title=\"Create Email Template\"\n            visible={isModalVisible}\n            onOk={handleOk}\n            onCancel={handleCancel}\n          >\n            <Text type=\"secondary\">Name of the template</Text>\n\n            <Input\n              value={emailData.name}\n              onChange={(e) => updateDataState(\"name\", e.target.value)}\n            />\n            <Text type=\"secondary\">\n              Code for the template that will be used to call using function\n            </Text>\n\n            <Input\n              value={emailData.emailCode}\n              onChange={(e) => updateDataState(\"emailCode\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default subject</Text>\n\n            <Input\n              value={emailData.subject}\n              onChange={(e) => updateDataState(\"subject\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default cc</Text>\n\n            <Input\n              value={emailData.cc}\n              onChange={(e) => updateDataState(\"cc\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default bcc</Text>\n\n            <Input\n              value={emailData.bcc}\n              onChange={(e) => updateDataState(\"bcc\", e.target.value)}\n            />\n            <Text type=\"secondary\">Additional Config</Text>\n\n            <JSONInput\n              theme=\"dark_mitsuketa_tribute\"\n              placeholder={emailData.config || {}}\n              locale={locale}\n              onChange={(e) => updateDataState(\"config\", e.jsObject)}\n              height=\"250px\"\n              width=\"100%\"\n            />\n          </Modal>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default EmailPage;\n","import React, { useState } from \"react\";\nimport { Modal, Button, message, Input } from \"antd\";\nimport { sendEmail } from \"../../http\";\nimport Text from \"antd/lib/typography/Text\";\nfunction SendEmail({ emailCode }) {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [to, setTo] = useState(\"\");\n  const [from, setFrom] = useState(\"\");\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = async () => {\n    try {\n      const { data } = await sendEmail(emailCode, to, from);\n      if (data.status) {\n        message.success(data.message);\n        setTo(\"\");\n        setFrom(\"\");\n        setIsModalVisible(false);\n      } else {\n        message.error(data.message);\n      }\n    } catch (error) {\n      setTo(\"\");\n      setFrom(\"\");\n      setIsModalVisible(false);\n      message.error(error.message);\n    }\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Button type=\"primary\" onClick={showModal}>\n        Send Email\n      </Button>\n      <Modal\n        title=\"Basic Modal\"\n        visible={isModalVisible}\n        onOk={handleOk}\n        onCancel={handleCancel}\n      >\n        <Text type=\"secondary\">to</Text>\n        <Input onChange={(e) => setTo(e.target.value)} />\n        <Text type=\"secondary\">from</Text>\n        <Input onChange={(e) => setFrom(e.target.value)} />\n      </Modal>\n    </>\n  );\n}\n\nexport default SendEmail;\n","import {\n  Alert,\n  Button,\n  Col,\n  Input,\n  message,\n  Modal,\n  PageHeader,\n  Row,\n  Spin,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { crudCollection, EOperations, ICurdBody } from \"../http\";\nimport parse from \"html-react-parser\";\n\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/themes/prism.css\";\nimport JSONInput from \"react-json-editor-ajrm\";\nimport locale from \"react-json-editor-ajrm/locale/en\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\nimport Text from \"antd/lib/typography/Text\";\nimport SendEmail from \"../components/emails/SendEmail\";\n\nfunction EmailPreview() {\n  const collectionName = \"email\";\n  const [isLoading, setIsLoading] = useState(true);\n  const [emailData, setEmailData] = useState<any>();\n  const [emailHtml, setEmailHtml] = useState(\"\");\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const handle = useFullScreenHandle();\n\n  const params: any = useParams();\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    updateData();\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const getRecordData = async () => {\n    setIsLoading(true);\n    try {\n      const action: ICurdBody = {\n        model: collectionName,\n        operations: EOperations.read,\n        data: {\n          id: params.id,\n        },\n      };\n      const { data } = await crudCollection(action);\n      setEmailData(data);\n      setIsLoading(false);\n      setEmailHtml(data.html);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateData = async () => {\n    try {\n      const body: ICurdBody = {\n        model: collectionName || \"\",\n        operations: EOperations.update,\n        data: {\n          body: {\n            ...emailData,\n            html: emailHtml,\n          },\n          id: params.id,\n        },\n      };\n      await crudCollection(body);\n      message.success(\"Template Saved\");\n    } catch (error: any) {\n      console.log(error);\n    }\n  };\n\n  const updateDataState = (key, value) => {\n    setEmailData({ ...emailData, [key]: value });\n  };\n\n  useEffect(() => {\n    getRecordData();\n  }, []);\n  return (\n    <div>\n      {isLoading ? (\n        <Spin />\n      ) : (\n        <>\n          <PageHeader\n            onBack={() => {\n              window.history.back();\n            }}\n            title={emailData.name}\n            subTitle={emailData.emailCode}\n            ghost={false}\n            extra={[\n              <Button\n                className=\"button-blue\"\n                onClick={() => setIsModalVisible(true)}\n              >\n                Edit\n              </Button>,\n              <Button className=\"button-green\" onClick={() => updateData()}>\n                Save\n              </Button>,\n              <SendEmail emailCode={emailData.emailCode} />,\n            ]}\n          />\n          <Row>\n            <Col span={24} style={{ padding: 5 }}>\n              <Alert\n                message=\"You can edit your html right away here.\"\n                type=\"info\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col span={12} style={{ padding: 10 }}>\n              <Editor\n                value={emailHtml}\n                onValueChange={(code) => setEmailHtml(code)}\n                highlight={(code) => highlight(code, languages.js)}\n                padding={10}\n                style={{\n                  fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                  fontSize: 12,\n                }}\n              />\n            </Col>\n            <Col span={12} style={{ padding: 10 }}>\n              <FullScreen handle={handle}>\n                <div>{parse(emailHtml)}</div>\n              </FullScreen>\n            </Col>\n          </Row>\n          <Modal\n            title=\"Edit Email\"\n            visible={isModalVisible}\n            onOk={handleOk}\n            onCancel={handleCancel}\n          >\n            <Text type=\"secondary\">Name of the template</Text>\n\n            <Input\n              value={emailData.name}\n              onChange={(e) => updateDataState(\"name\", e.target.value)}\n            />\n            <Text type=\"secondary\">\n              Code for the template that will be used to call using function\n            </Text>\n\n            <Input\n              value={emailData.emailCode}\n              onChange={(e) => updateDataState(\"emailCode\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default subject</Text>\n\n            <Input\n              value={emailData.subject}\n              onChange={(e) => updateDataState(\"subject\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default cc</Text>\n\n            <Input\n              value={emailData.cc}\n              onChange={(e) => updateDataState(\"cc\", e.target.value)}\n            />\n            <Text type=\"secondary\">Email default bcc</Text>\n\n            <Input\n              value={emailData.bcc}\n              onChange={(e) => updateDataState(\"bcc\", e.target.value)}\n            />\n            <Text type=\"secondary\">Additional Config</Text>\n\n            <JSONInput\n              theme=\"dark_mitsuketa_tribute\"\n              placeholder={emailData.config || {}}\n              locale={locale}\n              onChange={(e) => updateDataState(\"config\", e.jsObject)}\n              height=\"250px\"\n              width=\"100%\"\n            />\n          </Modal>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default EmailPreview;\n","import {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport { Layout, Alert, Button } from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ErrorBoundary } from \"react-error-boundary\";\n\nimport { initData } from \"./store/actionCreators\";\n// components\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nimport CollectionsPage from \"./pages/CollectionsPage\";\nimport SchemaFlowPage from \"./pages/SchemaFlowPage\";\nimport DataFlowPage from \"./pages/DataFlowPage\";\nimport FilePage from \"./pages/FilePage\";\nimport AuthPage from \"./pages/AuthPage\";\nimport ApiDocsPage from \"./pages/ApiDocsPage\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegisterPage from \"./pages/RegisterPage\";\nimport DataFlowDetailPage from \"./pages/DataFlowDetailPage\";\nimport EmailPage from \"./pages/EmailPage\";\nimport EmailPreview from \"./pages/EmailPreview\";\n\nconst { Content } = Layout;\n\nfunction ErrorFallback({ error, resetErrorBoundary }) {\n  return (\n    <Alert\n      message=\"Something broke, please try again\"\n      description={error.message}\n      type=\"error\"\n      action={\n        <Button onClick={resetErrorBoundary} size=\"small\" danger>\n          Detail\n        </Button>\n      }\n    />\n  );\n}\n\nfunction App() {\n  const isAuth = localStorage.getItem(\"token\");\n\n  return (\n    <Layout className=\"main\">\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        onReset={() => {\n          // reset the state of your app so the error doesn't happen again\n        }}\n      >\n        <Router basename=\"/admin-ui\">\n          {isAuth ? (\n            AuthRoutes()\n          ) : (\n            <>\n              <Route path=\"/register\" component={RegisterPage} />\n              <Route path=\"/login\" component={LoginPage} />\n              <Redirect path=\"/\" to=\"/login\" />\n            </>\n          )}\n        </Router>\n      </ErrorBoundary>\n    </Layout>\n  );\n}\n\nconst AuthRoutes = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initData());\n  }, []);\n\n  return (\n    <Layout>\n      <SideBar />\n      <Layout>\n        <Header />\n        <Content style={{ overflow: \"initial\" }}>\n          <Switch>\n            <Route path=\"/\" exact component={SchemaFlowPage} />\n            <Route path=\"/collections\" exact component={CollectionsPage} />\n            <Route path=\"/data\" exact component={DataFlowPage} />\n            <Route\n              path=\"/data/:collection\"\n              exact\n              component={DataFlowDetailPage}\n            />\n            <Route path=\"/files\" exact component={FilePage} />\n            <Route path=\"/auth\" exact component={AuthPage} />\n            <Route path=\"/api-docs\" exact component={ApiDocsPage} />\n            <Route path=\"/emails\" exact component={EmailPage} />\n            <Route path=\"/emails/:id\" exact component={EmailPreview} />\n          </Switch>\n        </Content>\n      </Layout>\n      <img\n        style={{ position: \"fixed\", bottom: 10, right: 10, opacity: 0.5 }}\n        src=\"/img/black.svg\"\n        alt=\"\"\n        width={100}\n      />\n    </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\";\n\nimport {\n  ICollection,\n  CollectionsState,\n  CollectionAction,\n} from \"../types/global\";\n\nconst initialState: CollectionsState = {\n  collections: [],\n  selectedCollection: undefined,\n};\n\nconst reducer = (\n  state: CollectionsState = initialState,\n  action: CollectionAction\n): CollectionsState => {\n  switch (action.type) {\n    case actionTypes.INIT_COLLECTION:\n      return {\n        ...state,\n        collections: action.collections || [],\n      };\n    case actionTypes.ADD_COLLECTION:\n      return {\n        ...state,\n        collections: state.collections\n          .concat(action.collection)\n          .sort((a, b) => a.name.localeCompare(b.name)),\n      };\n\n    case actionTypes.REMOVE_COLLECTION:\n      const updatedCollections: ICollection[] = state.collections\n        .filter((article) => article.id !== action.collection.id)\n        .sort((a, b) => a.name.localeCompare(b.name));\n      return {\n        ...state,\n        collections: updatedCollections,\n        selectedCollection: undefined,\n      };\n\n    case actionTypes.SET_COLLECTION:\n      const selectedCollection: ICollection = action.collection;\n\n      return {\n        ...state,\n        selectedCollection,\n      };\n\n    case actionTypes.UPDATE_COLLECTION:\n      const updatedCollection: ICollection = action.collection;\n\n      state.collections = state.collections.map((collection) => {\n        if (collection.id === updatedCollection.id) {\n          return updatedCollection;\n        }\n        return collection;\n      });\n\n      state.selectedCollection = updatedCollection;\n\n      return { ...state };\n  }\n\n  return state;\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware, Store } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// state\nimport reducer from \"./store/reducer\";\n\nimport {\n  CollectionsState,\n  CollectionAction,\n  DispatchType,\n} from \"./types/global\";\n\nconst store: Store<CollectionsState, CollectionAction> & {\n  dispatch: DispatchType;\n} = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk) // other store enhancers if any\n  )\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}